const PrivateManager = Symbol('RoomPrivateManager');
export class Room {
  id;
  displayName;
  slugifiedName;
  type;
  creator;
  isDefault;
  isReadOnly;
  displaySystemMessages;
  messageCount;
  createdAt;
  updatedAt;
  lastModifiedAt;
  customFields;
  userIds;
  _USERNAMES;
  [PrivateManager];
  /**
     * @deprecated
     */ get usernames() {
    if (!this._USERNAMES) {
      this._USERNAMES = this[PrivateManager]?.getBridges().getInternalBridge().doGetUsernamesOfRoomById(this.id);
    }
    return this._USERNAMES || Promise.resolve([]);
  }
  set usernames(usernames) {}
  constructor(room, manager){
    Object.assign(this, room);
    Object.defineProperty(this, PrivateManager, {
      configurable: false,
      enumerable: false,
      writable: false,
      value: manager
    });
  }
  get value() {
    return {
      id: this.id,
      displayName: this.displayName,
      slugifiedName: this.slugifiedName,
      type: this.type,
      creator: this.creator,
      isDefault: this.isDefault,
      isReadOnly: this.isReadOnly,
      displaySystemMessages: this.displaySystemMessages,
      messageCount: this.messageCount,
      createdAt: this.createdAt,
      updatedAt: this.updatedAt,
      lastModifiedAt: this.lastModifiedAt,
      customFields: this.customFields,
      userIds: this.userIds
    };
  }
  async getUsernames() {
    // Get usernames
    if (!this._USERNAMES) {
      this._USERNAMES = await this[PrivateManager]?.getBridges().getInternalBridge().doGetUsernamesOfRoomById(this.id);
    }
    return this._USERNAMES || [];
  }
  toJSON() {
    return this.value;
  }
  toString() {
    return this.value;
  }
  valueOf() {
    return this.value;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvYWJoaW5hdi9yb2NrZXQuY2hhdC9Sb2NrZXQuQ2hhdC9wYWNrYWdlcy9hcHBzLWVuZ2luZS9kZW5vLXJ1bnRpbWUvbGliL3Jvb20udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBJUm9vbSB9IGZyb20gJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL3Jvb21zL0lSb29tLnRzJztcbmltcG9ydCB0eXBlIHsgUm9vbVR5cGUgfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9yb29tcy9Sb29tVHlwZS50cyc7XG5pbXBvcnQgdHlwZSB7IElVc2VyIH0gZnJvbSAnQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL2RlZmluaXRpb24vdXNlcnMvSVVzZXIudHMnO1xuaW1wb3J0IHR5cGUgeyBBcHBNYW5hZ2VyIH0gZnJvbSAnQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL3NlcnZlci9BcHBNYW5hZ2VyLnRzJztcblxuY29uc3QgUHJpdmF0ZU1hbmFnZXIgPSBTeW1ib2woJ1Jvb21Qcml2YXRlTWFuYWdlcicpO1xuXG5leHBvcnQgY2xhc3MgUm9vbSB7XG4gICAgcHVibGljIGlkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICBwdWJsaWMgZGlzcGxheU5hbWU/OiBzdHJpbmc7XG5cbiAgICBwdWJsaWMgc2x1Z2lmaWVkTmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gICAgcHVibGljIHR5cGU6IFJvb21UeXBlIHwgdW5kZWZpbmVkO1xuXG4gICAgcHVibGljIGNyZWF0b3I6IElVc2VyIHwgdW5kZWZpbmVkO1xuXG4gICAgcHVibGljIGlzRGVmYXVsdD86IGJvb2xlYW47XG5cbiAgICBwdWJsaWMgaXNSZWFkT25seT86IGJvb2xlYW47XG5cbiAgICBwdWJsaWMgZGlzcGxheVN5c3RlbU1lc3NhZ2VzPzogYm9vbGVhbjtcblxuICAgIHB1YmxpYyBtZXNzYWdlQ291bnQ/OiBudW1iZXI7XG5cbiAgICBwdWJsaWMgY3JlYXRlZEF0PzogRGF0ZTtcblxuICAgIHB1YmxpYyB1cGRhdGVkQXQ/OiBEYXRlO1xuXG4gICAgcHVibGljIGxhc3RNb2RpZmllZEF0PzogRGF0ZTtcblxuICAgIHB1YmxpYyBjdXN0b21GaWVsZHM/OiB7IFtrZXk6IHN0cmluZ106IHVua25vd24gfTtcblxuICAgIHB1YmxpYyB1c2VySWRzPzogQXJyYXk8c3RyaW5nPjtcblxuICAgIHByaXZhdGUgX1VTRVJOQU1FUzogUHJvbWlzZTxBcnJheTxzdHJpbmc+PiB8IHVuZGVmaW5lZDtcblxuICAgIHByaXZhdGUgW1ByaXZhdGVNYW5hZ2VyXTogQXBwTWFuYWdlciB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgcHVibGljIGdldCB1c2VybmFtZXMoKTogUHJvbWlzZTxBcnJheTxzdHJpbmc+PiB7XG4gICAgICAgIGlmICghdGhpcy5fVVNFUk5BTUVTKSB7XG4gICAgICAgICAgICB0aGlzLl9VU0VSTkFNRVMgPSB0aGlzW1ByaXZhdGVNYW5hZ2VyXT8uZ2V0QnJpZGdlcygpLmdldEludGVybmFsQnJpZGdlKCkuZG9HZXRVc2VybmFtZXNPZlJvb21CeUlkKHRoaXMuaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX1VTRVJOQU1FUyB8fCBQcm9taXNlLnJlc29sdmUoW10pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgdXNlcm5hbWVzKHVzZXJuYW1lcykge31cblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihyb29tOiBJUm9vbSwgbWFuYWdlcjogQXBwTWFuYWdlcikge1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHJvb20pO1xuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBQcml2YXRlTWFuYWdlciwge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IG1hbmFnZXIsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldCB2YWx1ZSgpOiBvYmplY3Qge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogdGhpcy5kaXNwbGF5TmFtZSxcbiAgICAgICAgICAgIHNsdWdpZmllZE5hbWU6IHRoaXMuc2x1Z2lmaWVkTmFtZSxcbiAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIGNyZWF0b3I6IHRoaXMuY3JlYXRvcixcbiAgICAgICAgICAgIGlzRGVmYXVsdDogdGhpcy5pc0RlZmF1bHQsXG4gICAgICAgICAgICBpc1JlYWRPbmx5OiB0aGlzLmlzUmVhZE9ubHksXG4gICAgICAgICAgICBkaXNwbGF5U3lzdGVtTWVzc2FnZXM6IHRoaXMuZGlzcGxheVN5c3RlbU1lc3NhZ2VzLFxuICAgICAgICAgICAgbWVzc2FnZUNvdW50OiB0aGlzLm1lc3NhZ2VDb3VudCxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogdGhpcy5jcmVhdGVkQXQsXG4gICAgICAgICAgICB1cGRhdGVkQXQ6IHRoaXMudXBkYXRlZEF0LFxuICAgICAgICAgICAgbGFzdE1vZGlmaWVkQXQ6IHRoaXMubGFzdE1vZGlmaWVkQXQsXG4gICAgICAgICAgICBjdXN0b21GaWVsZHM6IHRoaXMuY3VzdG9tRmllbGRzLFxuICAgICAgICAgICAgdXNlcklkczogdGhpcy51c2VySWRzLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRVc2VybmFtZXMoKTogUHJvbWlzZTxBcnJheTxzdHJpbmc+PiB7XG4gICAgICAgIC8vIEdldCB1c2VybmFtZXNcbiAgICAgICAgaWYgKCF0aGlzLl9VU0VSTkFNRVMpIHtcbiAgICAgICAgICAgIHRoaXMuX1VTRVJOQU1FUyA9IGF3YWl0IHRoaXNbUHJpdmF0ZU1hbmFnZXJdPy5nZXRCcmlkZ2VzKCkuZ2V0SW50ZXJuYWxCcmlkZ2UoKS5kb0dldFVzZXJuYW1lc09mUm9vbUJ5SWQodGhpcy5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fVVNFUk5BTUVTIHx8IFtdO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIHZhbHVlT2YoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxNQUFNLGlCQUFpQixPQUFPO0FBRTlCLE9BQU8sTUFBTTtFQUNGLEdBQXVCO0VBRXZCLFlBQXFCO0VBRXJCLGNBQWtDO0VBRWxDLEtBQTJCO0VBRTNCLFFBQTJCO0VBRTNCLFVBQW9CO0VBRXBCLFdBQXFCO0VBRXJCLHNCQUFnQztFQUVoQyxhQUFzQjtFQUV0QixVQUFpQjtFQUVqQixVQUFpQjtFQUVqQixlQUFzQjtFQUV0QixhQUEwQztFQUUxQyxRQUF3QjtFQUV2QixXQUErQztFQUUvQyxDQUFDLGVBQWUsQ0FBeUI7RUFFakQ7O0tBRUMsR0FDRCxJQUFXLFlBQW9DO0lBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO01BQ2xCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxhQUFhLG9CQUFvQix5QkFBeUIsSUFBSSxDQUFDLEVBQUU7SUFDN0c7SUFFQSxPQUFPLElBQUksQ0FBQyxVQUFVLElBQUksUUFBUSxPQUFPLENBQUMsRUFBRTtFQUNoRDtFQUVBLElBQVcsVUFBVSxTQUFTLEVBQUUsQ0FBQztFQUVqQyxZQUFtQixJQUFXLEVBQUUsT0FBbUIsQ0FBRTtJQUNqRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUU7SUFFcEIsT0FBTyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtNQUN4QyxjQUFjO01BQ2QsWUFBWTtNQUNaLFVBQVU7TUFDVixPQUFPO0lBQ1g7RUFDSjtFQUVBLElBQUksUUFBZ0I7SUFDaEIsT0FBTztNQUNILElBQUksSUFBSSxDQUFDLEVBQUU7TUFDWCxhQUFhLElBQUksQ0FBQyxXQUFXO01BQzdCLGVBQWUsSUFBSSxDQUFDLGFBQWE7TUFDakMsTUFBTSxJQUFJLENBQUMsSUFBSTtNQUNmLFNBQVMsSUFBSSxDQUFDLE9BQU87TUFDckIsV0FBVyxJQUFJLENBQUMsU0FBUztNQUN6QixZQUFZLElBQUksQ0FBQyxVQUFVO01BQzNCLHVCQUF1QixJQUFJLENBQUMscUJBQXFCO01BQ2pELGNBQWMsSUFBSSxDQUFDLFlBQVk7TUFDL0IsV0FBVyxJQUFJLENBQUMsU0FBUztNQUN6QixXQUFXLElBQUksQ0FBQyxTQUFTO01BQ3pCLGdCQUFnQixJQUFJLENBQUMsY0FBYztNQUNuQyxjQUFjLElBQUksQ0FBQyxZQUFZO01BQy9CLFNBQVMsSUFBSSxDQUFDLE9BQU87SUFDekI7RUFDSjtFQUVBLE1BQWEsZUFBdUM7SUFDaEQsZ0JBQWdCO0lBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO01BQ2xCLElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsZUFBZSxFQUFFLGFBQWEsb0JBQW9CLHlCQUF5QixJQUFJLENBQUMsRUFBRTtJQUNuSDtJQUVBLE9BQU8sSUFBSSxDQUFDLFVBQVUsSUFBSSxFQUFFO0VBQ2hDO0VBRU8sU0FBUztJQUNaLE9BQU8sSUFBSSxDQUFDLEtBQUs7RUFDckI7RUFFTyxXQUFXO0lBQ2QsT0FBTyxJQUFJLENBQUMsS0FBSztFQUNyQjtFQUVPLFVBQVU7SUFDYixPQUFPLElBQUksQ0FBQyxLQUFLO0VBQ3JCO0FBQ0oifQ==