const PrivateManager = Symbol('RoomPrivateManager');
export class Room {
  id;
  displayName;
  slugifiedName;
  type;
  creator;
  isDefault;
  isReadOnly;
  displaySystemMessages;
  messageCount;
  createdAt;
  updatedAt;
  lastModifiedAt;
  customFields;
  userIds;
  _USERNAMES;
  [PrivateManager];
  /**
     * @deprecated
     */ get usernames() {
    // Get usernames
    if (!this._USERNAMES) {
      this._USERNAMES = this[PrivateManager].getBridges().getInternalBridge().doGetUsernamesOfRoomByIdSync(this.id);
    }
    return this._USERNAMES;
  }
  set usernames(usernames) {}
  constructor(room, manager){
    Object.assign(this, room);
    Object.defineProperty(this, PrivateManager, {
      configurable: false,
      enumerable: false,
      writable: false,
      value: manager
    });
  }
  get value() {
    return {
      id: this.id,
      displayName: this.displayName,
      slugifiedName: this.slugifiedName,
      type: this.type,
      creator: this.creator,
      isDefault: this.isDefault,
      isReadOnly: this.isReadOnly,
      displaySystemMessages: this.displaySystemMessages,
      messageCount: this.messageCount,
      createdAt: this.createdAt,
      updatedAt: this.updatedAt,
      lastModifiedAt: this.lastModifiedAt,
      customFields: this.customFields,
      userIds: this.userIds
    };
  }
  async getUsernames() {
    // Get usernames
    if (!this._USERNAMES) {
      this._USERNAMES = await this[PrivateManager].getBridges().getInternalBridge().doGetUsernamesOfRoomById(this.id);
    }
    return this._USERNAMES;
  }
  toJSON() {
    return this.value;
  }
  toString() {
    return this.value;
  }
  valueOf() {
    return this.value;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvYWJoaW5hdi9yb2NrZXQuY2hhdC9Sb2NrZXQuQ2hhdC9wYWNrYWdlcy9hcHBzLWVuZ2luZS9zcmMvc2VydmVyL3Jvb21zL1Jvb20udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBJUm9vbSwgUm9vbVR5cGUgfSBmcm9tICcuLi8uLi9kZWZpbml0aW9uL3Jvb21zJztcbmltcG9ydCB0eXBlIHsgSVVzZXIgfSBmcm9tICcuLi8uLi9kZWZpbml0aW9uL3VzZXJzJztcbmltcG9ydCB0eXBlIHsgQXBwTWFuYWdlciB9IGZyb20gJy4uL0FwcE1hbmFnZXInO1xuXG5jb25zdCBQcml2YXRlTWFuYWdlciA9IFN5bWJvbCgnUm9vbVByaXZhdGVNYW5hZ2VyJyk7XG5cbmV4cG9ydCBjbGFzcyBSb29tIGltcGxlbWVudHMgSVJvb20ge1xuICAgIHB1YmxpYyBpZDogc3RyaW5nO1xuXG4gICAgcHVibGljIGRpc3BsYXlOYW1lPzogc3RyaW5nO1xuXG4gICAgcHVibGljIHNsdWdpZmllZE5hbWU6IHN0cmluZztcblxuICAgIHB1YmxpYyB0eXBlOiBSb29tVHlwZTtcblxuICAgIHB1YmxpYyBjcmVhdG9yOiBJVXNlcjtcblxuICAgIHB1YmxpYyBpc0RlZmF1bHQ/OiBib29sZWFuO1xuXG4gICAgcHVibGljIGlzUmVhZE9ubHk/OiBib29sZWFuO1xuXG4gICAgcHVibGljIGRpc3BsYXlTeXN0ZW1NZXNzYWdlcz86IGJvb2xlYW47XG5cbiAgICBwdWJsaWMgbWVzc2FnZUNvdW50PzogbnVtYmVyO1xuXG4gICAgcHVibGljIGNyZWF0ZWRBdD86IERhdGU7XG5cbiAgICBwdWJsaWMgdXBkYXRlZEF0PzogRGF0ZTtcblxuICAgIHB1YmxpYyBsYXN0TW9kaWZpZWRBdD86IERhdGU7XG5cbiAgICBwdWJsaWMgY3VzdG9tRmllbGRzPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcblxuICAgIHB1YmxpYyB1c2VySWRzPzogQXJyYXk8c3RyaW5nPjtcblxuICAgIHByaXZhdGUgX1VTRVJOQU1FUzogQXJyYXk8c3RyaW5nPjtcblxuICAgIHByaXZhdGUgW1ByaXZhdGVNYW5hZ2VyXTogQXBwTWFuYWdlcjtcblxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgcHVibGljIGdldCB1c2VybmFtZXMoKTogQXJyYXk8c3RyaW5nPiB7XG4gICAgICAgIC8vIEdldCB1c2VybmFtZXNcbiAgICAgICAgaWYgKCF0aGlzLl9VU0VSTkFNRVMpIHtcbiAgICAgICAgICAgIHRoaXMuX1VTRVJOQU1FUyA9IHRoaXNbUHJpdmF0ZU1hbmFnZXJdLmdldEJyaWRnZXMoKS5nZXRJbnRlcm5hbEJyaWRnZSgpLmRvR2V0VXNlcm5hbWVzT2ZSb29tQnlJZFN5bmModGhpcy5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fVVNFUk5BTUVTO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgdXNlcm5hbWVzKHVzZXJuYW1lcykge31cblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihyb29tOiBJUm9vbSwgbWFuYWdlcjogQXBwTWFuYWdlcikge1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHJvb20pO1xuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBQcml2YXRlTWFuYWdlciwge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IG1hbmFnZXIsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldCB2YWx1ZSgpOiBvYmplY3Qge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogdGhpcy5kaXNwbGF5TmFtZSxcbiAgICAgICAgICAgIHNsdWdpZmllZE5hbWU6IHRoaXMuc2x1Z2lmaWVkTmFtZSxcbiAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIGNyZWF0b3I6IHRoaXMuY3JlYXRvcixcbiAgICAgICAgICAgIGlzRGVmYXVsdDogdGhpcy5pc0RlZmF1bHQsXG4gICAgICAgICAgICBpc1JlYWRPbmx5OiB0aGlzLmlzUmVhZE9ubHksXG4gICAgICAgICAgICBkaXNwbGF5U3lzdGVtTWVzc2FnZXM6IHRoaXMuZGlzcGxheVN5c3RlbU1lc3NhZ2VzLFxuICAgICAgICAgICAgbWVzc2FnZUNvdW50OiB0aGlzLm1lc3NhZ2VDb3VudCxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogdGhpcy5jcmVhdGVkQXQsXG4gICAgICAgICAgICB1cGRhdGVkQXQ6IHRoaXMudXBkYXRlZEF0LFxuICAgICAgICAgICAgbGFzdE1vZGlmaWVkQXQ6IHRoaXMubGFzdE1vZGlmaWVkQXQsXG4gICAgICAgICAgICBjdXN0b21GaWVsZHM6IHRoaXMuY3VzdG9tRmllbGRzLFxuICAgICAgICAgICAgdXNlcklkczogdGhpcy51c2VySWRzLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRVc2VybmFtZXMoKTogUHJvbWlzZTxBcnJheTxzdHJpbmc+PiB7XG4gICAgICAgIC8vIEdldCB1c2VybmFtZXNcbiAgICAgICAgaWYgKCF0aGlzLl9VU0VSTkFNRVMpIHtcbiAgICAgICAgICAgIHRoaXMuX1VTRVJOQU1FUyA9IGF3YWl0IHRoaXNbUHJpdmF0ZU1hbmFnZXJdLmdldEJyaWRnZXMoKS5nZXRJbnRlcm5hbEJyaWRnZSgpLmRvR2V0VXNlcm5hbWVzT2ZSb29tQnlJZCh0aGlzLmlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9VU0VSTkFNRVM7XG4gICAgfVxuXG4gICAgcHVibGljIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdmFsdWVPZigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0saUJBQWlCLE9BQU87QUFFOUIsT0FBTyxNQUFNO0VBQ0YsR0FBVztFQUVYLFlBQXFCO0VBRXJCLGNBQXNCO0VBRXRCLEtBQWU7RUFFZixRQUFlO0VBRWYsVUFBb0I7RUFFcEIsV0FBcUI7RUFFckIsc0JBQWdDO0VBRWhDLGFBQXNCO0VBRXRCLFVBQWlCO0VBRWpCLFVBQWlCO0VBRWpCLGVBQXNCO0VBRXRCLGFBQXNDO0VBRXRDLFFBQXdCO0VBRXZCLFdBQTBCO0VBRTFCLENBQUMsZUFBZSxDQUFhO0VBRXJDOztLQUVDLEdBQ0QsSUFBVyxZQUEyQjtJQUNsQyxnQkFBZ0I7SUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7TUFDbEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsR0FBRyxpQkFBaUIsR0FBRyw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUNoSDtJQUVBLE9BQU8sSUFBSSxDQUFDLFVBQVU7RUFDMUI7RUFFQSxJQUFXLFVBQVUsU0FBUyxFQUFFLENBQUM7RUFFakMsWUFBbUIsSUFBVyxFQUFFLE9BQW1CLENBQUU7SUFDakQsT0FBTyxNQUFNLENBQUMsSUFBSSxFQUFFO0lBRXBCLE9BQU8sY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7TUFDeEMsY0FBYztNQUNkLFlBQVk7TUFDWixVQUFVO01BQ1YsT0FBTztJQUNYO0VBQ0o7RUFFQSxJQUFJLFFBQWdCO0lBQ2hCLE9BQU87TUFDSCxJQUFJLElBQUksQ0FBQyxFQUFFO01BQ1gsYUFBYSxJQUFJLENBQUMsV0FBVztNQUM3QixlQUFlLElBQUksQ0FBQyxhQUFhO01BQ2pDLE1BQU0sSUFBSSxDQUFDLElBQUk7TUFDZixTQUFTLElBQUksQ0FBQyxPQUFPO01BQ3JCLFdBQVcsSUFBSSxDQUFDLFNBQVM7TUFDekIsWUFBWSxJQUFJLENBQUMsVUFBVTtNQUMzQix1QkFBdUIsSUFBSSxDQUFDLHFCQUFxQjtNQUNqRCxjQUFjLElBQUksQ0FBQyxZQUFZO01BQy9CLFdBQVcsSUFBSSxDQUFDLFNBQVM7TUFDekIsV0FBVyxJQUFJLENBQUMsU0FBUztNQUN6QixnQkFBZ0IsSUFBSSxDQUFDLGNBQWM7TUFDbkMsY0FBYyxJQUFJLENBQUMsWUFBWTtNQUMvQixTQUFTLElBQUksQ0FBQyxPQUFPO0lBQ3pCO0VBQ0o7RUFFQSxNQUFhLGVBQXVDO0lBQ2hELGdCQUFnQjtJQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtNQUNsQixJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEdBQUcsaUJBQWlCLEdBQUcsd0JBQXdCLENBQUMsSUFBSSxDQUFDLEVBQUU7SUFDbEg7SUFFQSxPQUFPLElBQUksQ0FBQyxVQUFVO0VBQzFCO0VBRU8sU0FBUztJQUNaLE9BQU8sSUFBSSxDQUFDLEtBQUs7RUFDckI7RUFFTyxXQUFXO0lBQ2QsT0FBTyxJQUFJLENBQUMsS0FBSztFQUNyQjtFQUVPLFVBQVU7SUFDYixPQUFPLElBQUksQ0FBQyxLQUFLO0VBQ3JCO0FBQ0oifQ==