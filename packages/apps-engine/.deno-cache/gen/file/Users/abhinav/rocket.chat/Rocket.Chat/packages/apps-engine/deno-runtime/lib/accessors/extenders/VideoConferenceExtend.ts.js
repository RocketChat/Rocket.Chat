import { require } from '../../../lib/require.ts';
const { RocketChatAssociationModel } = require('@rocket.chat/apps-engine/definition/metadata/RocketChatAssociations.js');
export class VideoConferenceExtender {
  videoConference;
  kind;
  constructor(videoConference){
    this.videoConference = videoConference;
    this.kind = RocketChatAssociationModel.VIDEO_CONFERENCE;
  }
  setProviderData(value) {
    this.videoConference.providerData = value;
    return this;
  }
  setStatus(value) {
    this.videoConference.status = value;
    return this;
  }
  setEndedBy(value) {
    this.videoConference.endedBy = {
      _id: value,
      // Name and username will be loaded automatically by the bridge
      username: '',
      name: ''
    };
    return this;
  }
  setEndedAt(value) {
    this.videoConference.endedAt = value;
    return this;
  }
  addUser(userId, ts) {
    this.videoConference.users.push({
      _id: userId,
      ts,
      // Name and username will be loaded automatically by the bridge
      username: '',
      name: ''
    });
    return this;
  }
  setDiscussionRid(rid) {
    this.videoConference.discussionRid = rid;
    return this;
  }
  getVideoConference() {
    return structuredClone(this.videoConference);
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvYWJoaW5hdi9yb2NrZXQuY2hhdC9Sb2NrZXQuQ2hhdC9wYWNrYWdlcy9hcHBzLWVuZ2luZS9kZW5vLXJ1bnRpbWUvbGliL2FjY2Vzc29ycy9leHRlbmRlcnMvVmlkZW9Db25mZXJlbmNlRXh0ZW5kLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSVZpZGVvQ29uZmVyZW5jZUV4dGVuZGVyIH0gZnJvbSAnQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL2RlZmluaXRpb24vYWNjZXNzb3JzL0lWaWRlb0NvbmZlcmVuY2VFeHRlbmQudHMnO1xuaW1wb3J0IHR5cGUgeyBWaWRlb0NvbmZlcmVuY2UsIFZpZGVvQ29uZmVyZW5jZU1lbWJlciB9IGZyb20gJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL3ZpZGVvQ29uZmVyZW5jZXMvSVZpZGVvQ29uZmVyZW5jZS50cyc7XG5pbXBvcnQgdHlwZSB7IElWaWRlb0NvbmZlcmVuY2VVc2VyIH0gZnJvbSAnQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL2RlZmluaXRpb24vdmlkZW9Db25mZXJlbmNlcy9JVmlkZW9Db25mZXJlbmNlVXNlci50cyc7XG5pbXBvcnQgdHlwZSB7IFJvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsIGFzIF9Sb2NrZXRDaGF0QXNzb2NpYXRpb25Nb2RlbCB9IGZyb20gJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL21ldGFkYXRhL1JvY2tldENoYXRBc3NvY2lhdGlvbnMudHMnO1xuXG5pbXBvcnQgeyByZXF1aXJlIH0gZnJvbSAnLi4vLi4vLi4vbGliL3JlcXVpcmUudHMnO1xuXG5jb25zdCB7IFJvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsIH0gPSByZXF1aXJlKCdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9tZXRhZGF0YS9Sb2NrZXRDaGF0QXNzb2NpYXRpb25zLmpzJykgYXMge1xuICAgIFJvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsOiB0eXBlb2YgX1JvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsO1xufTtcblxuZXhwb3J0IGNsYXNzIFZpZGVvQ29uZmVyZW5jZUV4dGVuZGVyIGltcGxlbWVudHMgSVZpZGVvQ29uZmVyZW5jZUV4dGVuZGVyIHtcbiAgICBwdWJsaWMga2luZDogX1JvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsLlZJREVPX0NPTkZFUkVOQ0U7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZGVvQ29uZmVyZW5jZTogVmlkZW9Db25mZXJlbmNlKSB7XG4gICAgICAgIHRoaXMua2luZCA9IFJvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsLlZJREVPX0NPTkZFUkVOQ0U7XG4gICAgfVxuXG4gICAgcHVibGljIHNldFByb3ZpZGVyRGF0YSh2YWx1ZTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pOiBJVmlkZW9Db25mZXJlbmNlRXh0ZW5kZXIge1xuICAgICAgICB0aGlzLnZpZGVvQ29uZmVyZW5jZS5wcm92aWRlckRhdGEgPSB2YWx1ZTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0U3RhdHVzKHZhbHVlOiBWaWRlb0NvbmZlcmVuY2VbJ3N0YXR1cyddKTogSVZpZGVvQ29uZmVyZW5jZUV4dGVuZGVyIHtcbiAgICAgICAgdGhpcy52aWRlb0NvbmZlcmVuY2Uuc3RhdHVzID0gdmFsdWU7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIHNldEVuZGVkQnkodmFsdWU6IElWaWRlb0NvbmZlcmVuY2VVc2VyWydfaWQnXSk6IElWaWRlb0NvbmZlcmVuY2VFeHRlbmRlciB7XG4gICAgICAgIHRoaXMudmlkZW9Db25mZXJlbmNlLmVuZGVkQnkgPSB7XG4gICAgICAgICAgICBfaWQ6IHZhbHVlLFxuICAgICAgICAgICAgLy8gTmFtZSBhbmQgdXNlcm5hbWUgd2lsbCBiZSBsb2FkZWQgYXV0b21hdGljYWxseSBieSB0aGUgYnJpZGdlXG4gICAgICAgICAgICB1c2VybmFtZTogJycsXG4gICAgICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0RW5kZWRBdCh2YWx1ZTogVmlkZW9Db25mZXJlbmNlWydlbmRlZEF0J10pOiBJVmlkZW9Db25mZXJlbmNlRXh0ZW5kZXIge1xuICAgICAgICB0aGlzLnZpZGVvQ29uZmVyZW5jZS5lbmRlZEF0ID0gdmFsdWU7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZFVzZXIodXNlcklkOiBWaWRlb0NvbmZlcmVuY2VNZW1iZXJbJ19pZCddLCB0cz86IFZpZGVvQ29uZmVyZW5jZU1lbWJlclsndHMnXSk6IElWaWRlb0NvbmZlcmVuY2VFeHRlbmRlciB7XG4gICAgICAgIHRoaXMudmlkZW9Db25mZXJlbmNlLnVzZXJzLnB1c2goe1xuICAgICAgICAgICAgX2lkOiB1c2VySWQsXG4gICAgICAgICAgICB0cyxcbiAgICAgICAgICAgIC8vIE5hbWUgYW5kIHVzZXJuYW1lIHdpbGwgYmUgbG9hZGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIGJyaWRnZVxuICAgICAgICAgICAgdXNlcm5hbWU6ICcnLFxuICAgICAgICAgICAgbmFtZTogJycsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXREaXNjdXNzaW9uUmlkKHJpZDogVmlkZW9Db25mZXJlbmNlWydkaXNjdXNzaW9uUmlkJ10pOiBJVmlkZW9Db25mZXJlbmNlRXh0ZW5kZXIge1xuICAgICAgICB0aGlzLnZpZGVvQ29uZmVyZW5jZS5kaXNjdXNzaW9uUmlkID0gcmlkO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRWaWRlb0NvbmZlcmVuY2UoKTogVmlkZW9Db25mZXJlbmNlIHtcbiAgICAgICAgcmV0dXJuIHN0cnVjdHVyZWRDbG9uZSh0aGlzLnZpZGVvQ29uZmVyZW5jZSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLFNBQVMsT0FBTyxRQUFRLDBCQUEwQjtBQUVsRCxNQUFNLEVBQUUsMEJBQTBCLEVBQUUsR0FBRyxRQUFRO0FBSS9DLE9BQU8sTUFBTTs7RUFDRixLQUFtRDtFQUUxRCxZQUFZLEFBQVEsZUFBZ0MsQ0FBRTtTQUFsQyxrQkFBQTtJQUNoQixJQUFJLENBQUMsSUFBSSxHQUFHLDJCQUEyQixnQkFBZ0I7RUFDM0Q7RUFFTyxnQkFBZ0IsS0FBOEIsRUFBNEI7SUFDN0UsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEdBQUc7SUFFcEMsT0FBTyxJQUFJO0VBQ2Y7RUFFTyxVQUFVLEtBQWdDLEVBQTRCO0lBQ3pFLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxHQUFHO0lBRTlCLE9BQU8sSUFBSTtFQUNmO0VBRU8sV0FBVyxLQUFrQyxFQUE0QjtJQUM1RSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sR0FBRztNQUMzQixLQUFLO01BQ0wsK0RBQStEO01BQy9ELFVBQVU7TUFDVixNQUFNO0lBQ1Y7SUFFQSxPQUFPLElBQUk7RUFDZjtFQUVPLFdBQVcsS0FBaUMsRUFBNEI7SUFDM0UsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEdBQUc7SUFFL0IsT0FBTyxJQUFJO0VBQ2Y7RUFFTyxRQUFRLE1BQW9DLEVBQUUsRUFBZ0MsRUFBNEI7SUFDN0csSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO01BQzVCLEtBQUs7TUFDTDtNQUNBLCtEQUErRDtNQUMvRCxVQUFVO01BQ1YsTUFBTTtJQUNWO0lBRUEsT0FBTyxJQUFJO0VBQ2Y7RUFFTyxpQkFBaUIsR0FBcUMsRUFBNEI7SUFDckYsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLEdBQUc7SUFFckMsT0FBTyxJQUFJO0VBQ2Y7RUFFTyxxQkFBc0M7SUFDekMsT0FBTyxnQkFBZ0IsSUFBSSxDQUFDLGVBQWU7RUFDL0M7QUFDSiJ9