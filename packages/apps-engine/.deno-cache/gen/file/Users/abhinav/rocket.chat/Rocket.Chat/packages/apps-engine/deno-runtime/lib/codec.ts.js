import { Buffer } from 'node:buffer';
import { Decoder, Encoder, ExtensionCodec } from '@msgpack/msgpack';
import { require } from "./require.ts";
const { App } = require('@rocket.chat/apps-engine/definition/App.js');
const extensionCodec = new ExtensionCodec();
extensionCodec.register({
  type: 0,
  encode: (object)=>{
    // We don't care about functions, but also don't want to throw an error
    if (typeof object === 'function' || object instanceof App) {
      return new Uint8Array(0);
    }
    return null;
  },
  decode: (_data)=>undefined
});
// Since Deno doesn't have Buffer by default, we need to use Uint8Array
extensionCodec.register({
  type: 1,
  encode: (object)=>{
    if (object instanceof Buffer) {
      return new Uint8Array(object.buffer, object.byteOffset, object.byteLength);
    }
    return null;
  },
  // msgpack will reuse the Uint8Array instance, so WE NEED to copy it instead of simply creating a view
  decode: (data)=>{
    return Buffer.from(data);
  }
});
export const encoder = new Encoder({
  extensionCodec
});
export const decoder = new Decoder({
  extensionCodec
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvYWJoaW5hdi9yb2NrZXQuY2hhdC9Sb2NrZXQuQ2hhdC9wYWNrYWdlcy9hcHBzLWVuZ2luZS9kZW5vLXJ1bnRpbWUvbGliL2NvZGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ25vZGU6YnVmZmVyJztcbmltcG9ydCB7IERlY29kZXIsIEVuY29kZXIsIEV4dGVuc2lvbkNvZGVjIH0gZnJvbSAnQG1zZ3BhY2svbXNncGFjayc7XG5cbmltcG9ydCB0eXBlIHsgQXBwIGFzIF9BcHAgfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9BcHAudHMnO1xuaW1wb3J0IHsgcmVxdWlyZSB9IGZyb20gXCIuL3JlcXVpcmUudHNcIjtcblxuY29uc3QgeyBBcHAgfSA9IHJlcXVpcmUoJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL0FwcC5qcycpIGFzIHtcbiAgICBBcHA6IHR5cGVvZiBfQXBwO1xufTtcblxuY29uc3QgZXh0ZW5zaW9uQ29kZWMgPSBuZXcgRXh0ZW5zaW9uQ29kZWMoKTtcblxuZXh0ZW5zaW9uQ29kZWMucmVnaXN0ZXIoe1xuICAgIHR5cGU6IDAsXG4gICAgZW5jb2RlOiAob2JqZWN0OiB1bmtub3duKSA9PiB7XG4gICAgICAgIC8vIFdlIGRvbid0IGNhcmUgYWJvdXQgZnVuY3Rpb25zLCBidXQgYWxzbyBkb24ndCB3YW50IHRvIHRocm93IGFuIGVycm9yXG4gICAgICAgIGlmICh0eXBlb2Ygb2JqZWN0ID09PSAnZnVuY3Rpb24nIHx8IG9iamVjdCBpbnN0YW5jZW9mIEFwcCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBkZWNvZGU6IChfZGF0YTogVWludDhBcnJheSkgPT4gdW5kZWZpbmVkLFxufSk7XG5cbi8vIFNpbmNlIERlbm8gZG9lc24ndCBoYXZlIEJ1ZmZlciBieSBkZWZhdWx0LCB3ZSBuZWVkIHRvIHVzZSBVaW50OEFycmF5XG5leHRlbnNpb25Db2RlYy5yZWdpc3Rlcih7XG4gICAgdHlwZTogMSxcbiAgICBlbmNvZGU6IChvYmplY3Q6IHVua25vd24pID0+IHtcbiAgICAgICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG9iamVjdC5idWZmZXIsIG9iamVjdC5ieXRlT2Zmc2V0LCBvYmplY3QuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIC8vIG1zZ3BhY2sgd2lsbCByZXVzZSB0aGUgVWludDhBcnJheSBpbnN0YW5jZSwgc28gV0UgTkVFRCB0byBjb3B5IGl0IGluc3RlYWQgb2Ygc2ltcGx5IGNyZWF0aW5nIGEgdmlld1xuICAgIGRlY29kZTogKGRhdGE6IFVpbnQ4QXJyYXkpID0+IHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGRhdGEpO1xuICAgIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IGVuY29kZXIgPSBuZXcgRW5jb2Rlcih7IGV4dGVuc2lvbkNvZGVjIH0pO1xuZXhwb3J0IGNvbnN0IGRlY29kZXIgPSBuZXcgRGVjb2Rlcih7IGV4dGVuc2lvbkNvZGVjIH0pO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsTUFBTSxRQUFRLGNBQWM7QUFDckMsU0FBUyxPQUFPLEVBQUUsT0FBTyxFQUFFLGNBQWMsUUFBUSxtQkFBbUI7QUFHcEUsU0FBUyxPQUFPLFFBQVEsZUFBZTtBQUV2QyxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsUUFBUTtBQUl4QixNQUFNLGlCQUFpQixJQUFJO0FBRTNCLGVBQWUsUUFBUSxDQUFDO0VBQ3BCLE1BQU07RUFDTixRQUFRLENBQUM7SUFDTCx1RUFBdUU7SUFDdkUsSUFBSSxPQUFPLFdBQVcsY0FBYyxrQkFBa0IsS0FBSztNQUN2RCxPQUFPLElBQUksV0FBVztJQUMxQjtJQUVBLE9BQU87RUFDWDtFQUNBLFFBQVEsQ0FBQyxRQUFzQjtBQUNuQztBQUVBLHVFQUF1RTtBQUN2RSxlQUFlLFFBQVEsQ0FBQztFQUNwQixNQUFNO0VBQ04sUUFBUSxDQUFDO0lBQ0wsSUFBSSxrQkFBa0IsUUFBUTtNQUMxQixPQUFPLElBQUksV0FBVyxPQUFPLE1BQU0sRUFBRSxPQUFPLFVBQVUsRUFBRSxPQUFPLFVBQVU7SUFDN0U7SUFFQSxPQUFPO0VBQ1g7RUFDQSxzR0FBc0c7RUFDdEcsUUFBUSxDQUFDO0lBQ0wsT0FBTyxPQUFPLElBQUksQ0FBQztFQUN2QjtBQUNKO0FBRUEsT0FBTyxNQUFNLFVBQVUsSUFBSSxRQUFRO0VBQUU7QUFBZSxHQUFHO0FBQ3ZELE9BQU8sTUFBTSxVQUFVLElBQUksUUFBUTtFQUFFO0FBQWUsR0FBRyJ9