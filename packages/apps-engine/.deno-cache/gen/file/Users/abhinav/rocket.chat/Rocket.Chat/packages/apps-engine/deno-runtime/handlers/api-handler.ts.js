import { JsonRpcError } from 'jsonrpc-lite';
import { AppObjectRegistry } from '../AppObjectRegistry.ts';
import { AppAccessorsInstance } from '../lib/accessors/mod.ts';
export default async function apiHandler(call, params) {
  const [, path, httpMethod] = call.split(':');
  const endpoint = AppObjectRegistry.get(`api:${path}`);
  const logger = AppObjectRegistry.get('logger');
  if (!endpoint) {
    return new JsonRpcError(`Endpoint ${path} not found`, -32000);
  }
  const method = endpoint[httpMethod];
  if (typeof method !== 'function') {
    return new JsonRpcError(`${path}'s ${httpMethod} not exists`, -32000);
  }
  const [request, endpointInfo] = params;
  logger?.debug(`${path}'s ${call} is being executed...`, request);
  try {
    // deno-lint-ignore ban-types
    const result = await method.apply(endpoint, [
      request,
      endpointInfo,
      AppAccessorsInstance.getReader(),
      AppAccessorsInstance.getModifier(),
      AppAccessorsInstance.getHttp(),
      AppAccessorsInstance.getPersistence()
    ]);
    logger?.debug(`${path}'s ${call} was successfully executed.`);
    return result;
  } catch (e) {
    logger?.debug(`${path}'s ${call} was unsuccessful.`);
    return new JsonRpcError(e.message || "Internal server error", -32000);
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvYWJoaW5hdi9yb2NrZXQuY2hhdC9Sb2NrZXQuQ2hhdC9wYWNrYWdlcy9hcHBzLWVuZ2luZS9kZW5vLXJ1bnRpbWUvaGFuZGxlcnMvYXBpLWhhbmRsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVmaW5lZCwgSnNvblJwY0Vycm9yIH0gZnJvbSAnanNvbnJwYy1saXRlJztcbmltcG9ydCB0eXBlIHsgSUFwaUVuZHBvaW50IH0gZnJvbSAnQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL2RlZmluaXRpb24vYXBpL0lBcGlFbmRwb2ludC50cyc7XG5cbmltcG9ydCB7IEFwcE9iamVjdFJlZ2lzdHJ5IH0gZnJvbSAnLi4vQXBwT2JqZWN0UmVnaXN0cnkudHMnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vbGliL2xvZ2dlci50cyc7XG5pbXBvcnQgeyBBcHBBY2Nlc3NvcnNJbnN0YW5jZSB9IGZyb20gJy4uL2xpYi9hY2Nlc3NvcnMvbW9kLnRzJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gYXBpSGFuZGxlcihjYWxsOiBzdHJpbmcsIHBhcmFtczogdW5rbm93bik6IFByb21pc2U8SnNvblJwY0Vycm9yIHwgRGVmaW5lZD4ge1xuICAgIGNvbnN0IFssIHBhdGgsIGh0dHBNZXRob2RdID0gY2FsbC5zcGxpdCgnOicpO1xuXG4gICAgY29uc3QgZW5kcG9pbnQgPSBBcHBPYmplY3RSZWdpc3RyeS5nZXQ8SUFwaUVuZHBvaW50PihgYXBpOiR7cGF0aH1gKTtcbiAgICBjb25zdCBsb2dnZXIgPSBBcHBPYmplY3RSZWdpc3RyeS5nZXQ8TG9nZ2VyPignbG9nZ2VyJyk7XG5cbiAgICBpZiAoIWVuZHBvaW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgSnNvblJwY0Vycm9yKGBFbmRwb2ludCAke3BhdGh9IG5vdCBmb3VuZGAsIC0zMjAwMCk7XG4gICAgfVxuXG4gICAgY29uc3QgbWV0aG9kID0gZW5kcG9pbnRbaHR0cE1ldGhvZCBhcyBrZXlvZiBJQXBpRW5kcG9pbnRdO1xuXG4gICAgaWYgKHR5cGVvZiBtZXRob2QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBKc29uUnBjRXJyb3IoYCR7cGF0aH0ncyAke2h0dHBNZXRob2R9IG5vdCBleGlzdHNgLCAtMzIwMDApO1xuICAgIH1cblxuICAgIGNvbnN0IFtyZXF1ZXN0LCBlbmRwb2ludEluZm9dID0gcGFyYW1zIGFzIEFycmF5PHVua25vd24+O1xuXG4gICAgbG9nZ2VyPy5kZWJ1ZyhgJHtwYXRofSdzICR7Y2FsbH0gaXMgYmVpbmcgZXhlY3V0ZWQuLi5gLCByZXF1ZXN0KTtcblxuICAgIHRyeSB7XG4gICAgICAgIC8vIGRlbm8tbGludC1pZ25vcmUgYmFuLXR5cGVzXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IChtZXRob2QgYXMgRnVuY3Rpb24pLmFwcGx5KGVuZHBvaW50LCBbXG4gICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgZW5kcG9pbnRJbmZvLFxuICAgICAgICAgICAgQXBwQWNjZXNzb3JzSW5zdGFuY2UuZ2V0UmVhZGVyKCksXG4gICAgICAgICAgICBBcHBBY2Nlc3NvcnNJbnN0YW5jZS5nZXRNb2RpZmllcigpLFxuICAgICAgICAgICAgQXBwQWNjZXNzb3JzSW5zdGFuY2UuZ2V0SHR0cCgpLFxuICAgICAgICAgICAgQXBwQWNjZXNzb3JzSW5zdGFuY2UuZ2V0UGVyc2lzdGVuY2UoKSxcbiAgICAgICAgXSk7XG5cbiAgICAgICAgbG9nZ2VyPy5kZWJ1ZyhgJHtwYXRofSdzICR7Y2FsbH0gd2FzIHN1Y2Nlc3NmdWxseSBleGVjdXRlZC5gKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nZ2VyPy5kZWJ1ZyhgJHtwYXRofSdzICR7Y2FsbH0gd2FzIHVuc3VjY2Vzc2Z1bC5gKTtcbiAgICAgICAgcmV0dXJuIG5ldyBKc29uUnBjRXJyb3IoZS5tZXNzYWdlIHx8IFwiSW50ZXJuYWwgc2VydmVyIGVycm9yXCIsIC0zMjAwMCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQWtCLFlBQVksUUFBUSxlQUFlO0FBR3JELFNBQVMsaUJBQWlCLFFBQVEsMEJBQTBCO0FBRTVELFNBQVMsb0JBQW9CLFFBQVEsMEJBQTBCO0FBRS9ELGVBQWUsZUFBZSxXQUFXLElBQVksRUFBRSxNQUFlO0VBQ2xFLE1BQU0sR0FBRyxNQUFNLFdBQVcsR0FBRyxLQUFLLEtBQUssQ0FBQztFQUV4QyxNQUFNLFdBQVcsa0JBQWtCLEdBQUcsQ0FBZSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7RUFDbEUsTUFBTSxTQUFTLGtCQUFrQixHQUFHLENBQVM7RUFFN0MsSUFBSSxDQUFDLFVBQVU7SUFDWCxPQUFPLElBQUksYUFBYSxDQUFDLFNBQVMsRUFBRSxLQUFLLFVBQVUsQ0FBQyxFQUFFLENBQUM7RUFDM0Q7RUFFQSxNQUFNLFNBQVMsUUFBUSxDQUFDLFdBQWlDO0VBRXpELElBQUksT0FBTyxXQUFXLFlBQVk7SUFDOUIsT0FBTyxJQUFJLGFBQWEsQ0FBQyxFQUFFLEtBQUssR0FBRyxFQUFFLFdBQVcsV0FBVyxDQUFDLEVBQUUsQ0FBQztFQUNuRTtFQUVBLE1BQU0sQ0FBQyxTQUFTLGFBQWEsR0FBRztFQUVoQyxRQUFRLE1BQU0sQ0FBQyxFQUFFLEtBQUssR0FBRyxFQUFFLEtBQUsscUJBQXFCLENBQUMsRUFBRTtFQUV4RCxJQUFJO0lBQ0EsNkJBQTZCO0lBQzdCLE1BQU0sU0FBUyxNQUFNLEFBQUMsT0FBb0IsS0FBSyxDQUFDLFVBQVU7TUFDdEQ7TUFDQTtNQUNBLHFCQUFxQixTQUFTO01BQzlCLHFCQUFxQixXQUFXO01BQ2hDLHFCQUFxQixPQUFPO01BQzVCLHFCQUFxQixjQUFjO0tBQ3RDO0lBRUQsUUFBUSxNQUFNLENBQUMsRUFBRSxLQUFLLEdBQUcsRUFBRSxLQUFLLDJCQUEyQixDQUFDO0lBRTVELE9BQU87RUFDWCxFQUFFLE9BQU8sR0FBRztJQUNSLFFBQVEsTUFBTSxDQUFDLEVBQUUsS0FBSyxHQUFHLEVBQUUsS0FBSyxrQkFBa0IsQ0FBQztJQUNuRCxPQUFPLElBQUksYUFBYSxFQUFFLE9BQU8sSUFBSSx5QkFBeUIsQ0FBQztFQUNuRTtBQUNKIn0=