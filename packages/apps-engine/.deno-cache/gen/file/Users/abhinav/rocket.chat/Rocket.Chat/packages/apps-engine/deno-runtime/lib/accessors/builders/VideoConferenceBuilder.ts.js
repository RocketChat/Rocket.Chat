import { require } from '../../../lib/require.ts';
const { RocketChatAssociationModel } = require('@rocket.chat/apps-engine/definition/metadata/RocketChatAssociations.js');
export class VideoConferenceBuilder {
  kind = RocketChatAssociationModel.VIDEO_CONFERENCE;
  call;
  constructor(data){
    this.call = data || {};
  }
  setData(data) {
    this.call = {
      rid: data.rid,
      createdBy: data.createdBy,
      providerName: data.providerName,
      title: data.title,
      discussionRid: data.discussionRid
    };
    return this;
  }
  setRoomId(rid) {
    this.call.rid = rid;
    return this;
  }
  getRoomId() {
    return this.call.rid;
  }
  setCreatedBy(userId) {
    this.call.createdBy = userId;
    return this;
  }
  getCreatedBy() {
    return this.call.createdBy;
  }
  setProviderName(userId) {
    this.call.providerName = userId;
    return this;
  }
  getProviderName() {
    return this.call.providerName;
  }
  setProviderData(data) {
    this.call.providerData = data;
    return this;
  }
  getProviderData() {
    return this.call.providerData;
  }
  setTitle(userId) {
    this.call.title = userId;
    return this;
  }
  getTitle() {
    return this.call.title;
  }
  setDiscussionRid(rid) {
    this.call.discussionRid = rid;
    return this;
  }
  getDiscussionRid() {
    return this.call.discussionRid;
  }
  getVideoConference() {
    return this.call;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvYWJoaW5hdi9yb2NrZXQuY2hhdC9Sb2NrZXQuQ2hhdC9wYWNrYWdlcy9hcHBzLWVuZ2luZS9kZW5vLXJ1bnRpbWUvbGliL2FjY2Vzc29ycy9idWlsZGVycy9WaWRlb0NvbmZlcmVuY2VCdWlsZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSVZpZGVvQ29uZmVyZW5jZUJ1aWxkZXIgfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9hY2Nlc3NvcnMvSVZpZGVvQ29uZmVyZW5jZUJ1aWxkZXIudHMnO1xuaW1wb3J0IHR5cGUgeyBJR3JvdXBWaWRlb0NvbmZlcmVuY2UgfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi92aWRlb0NvbmZlcmVuY2VzL0lWaWRlb0NvbmZlcmVuY2UudHMnO1xuXG5pbXBvcnQgdHlwZSB7IFJvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsIGFzIF9Sb2NrZXRDaGF0QXNzb2NpYXRpb25Nb2RlbCB9IGZyb20gJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL21ldGFkYXRhL1JvY2tldENoYXRBc3NvY2lhdGlvbnMudHMnO1xuXG5pbXBvcnQgeyByZXF1aXJlIH0gZnJvbSAnLi4vLi4vLi4vbGliL3JlcXVpcmUudHMnO1xuXG5jb25zdCB7IFJvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsIH0gPSByZXF1aXJlKCdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9tZXRhZGF0YS9Sb2NrZXRDaGF0QXNzb2NpYXRpb25zLmpzJykgYXMge1xuICAgIFJvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsOiB0eXBlb2YgX1JvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsO1xufTtcblxuZXhwb3J0IHR5cGUgQXBwVmlkZW9Db25mZXJlbmNlID0gUGljazxJR3JvdXBWaWRlb0NvbmZlcmVuY2UsICdyaWQnIHwgJ3Byb3ZpZGVyTmFtZScgfCAncHJvdmlkZXJEYXRhJyB8ICd0aXRsZScgfCAnZGlzY3Vzc2lvblJpZCc+ICYge1xuICAgIGNyZWF0ZWRCeTogSUdyb3VwVmlkZW9Db25mZXJlbmNlWydjcmVhdGVkQnknXVsnX2lkJ107XG59O1xuXG5leHBvcnQgY2xhc3MgVmlkZW9Db25mZXJlbmNlQnVpbGRlciBpbXBsZW1lbnRzIElWaWRlb0NvbmZlcmVuY2VCdWlsZGVyIHtcbiAgICBwdWJsaWMga2luZDogX1JvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsLlZJREVPX0NPTkZFUkVOQ0UgPSBSb2NrZXRDaGF0QXNzb2NpYXRpb25Nb2RlbC5WSURFT19DT05GRVJFTkNFO1xuXG4gICAgcHJvdGVjdGVkIGNhbGw6IEFwcFZpZGVvQ29uZmVyZW5jZTtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsPEFwcFZpZGVvQ29uZmVyZW5jZT4pIHtcbiAgICAgICAgdGhpcy5jYWxsID0gKGRhdGEgfHwge30pIGFzIEFwcFZpZGVvQ29uZmVyZW5jZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0RGF0YShkYXRhOiBQYXJ0aWFsPEFwcFZpZGVvQ29uZmVyZW5jZT4pOiBJVmlkZW9Db25mZXJlbmNlQnVpbGRlciB7XG4gICAgICAgIHRoaXMuY2FsbCA9IHtcbiAgICAgICAgICAgIHJpZDogZGF0YS5yaWQhLFxuICAgICAgICAgICAgY3JlYXRlZEJ5OiBkYXRhLmNyZWF0ZWRCeSxcbiAgICAgICAgICAgIHByb3ZpZGVyTmFtZTogZGF0YS5wcm92aWRlck5hbWUhLFxuICAgICAgICAgICAgdGl0bGU6IGRhdGEudGl0bGUhLFxuICAgICAgICAgICAgZGlzY3Vzc2lvblJpZDogZGF0YS5kaXNjdXNzaW9uUmlkLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRSb29tSWQocmlkOiBzdHJpbmcpOiBJVmlkZW9Db25mZXJlbmNlQnVpbGRlciB7XG4gICAgICAgIHRoaXMuY2FsbC5yaWQgPSByaWQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRSb29tSWQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbC5yaWQ7XG4gICAgfVxuXG4gICAgcHVibGljIHNldENyZWF0ZWRCeSh1c2VySWQ6IHN0cmluZyk6IElWaWRlb0NvbmZlcmVuY2VCdWlsZGVyIHtcbiAgICAgICAgdGhpcy5jYWxsLmNyZWF0ZWRCeSA9IHVzZXJJZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENyZWF0ZWRCeSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxsLmNyZWF0ZWRCeTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0UHJvdmlkZXJOYW1lKHVzZXJJZDogc3RyaW5nKTogSVZpZGVvQ29uZmVyZW5jZUJ1aWxkZXIge1xuICAgICAgICB0aGlzLmNhbGwucHJvdmlkZXJOYW1lID0gdXNlcklkO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UHJvdmlkZXJOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGwucHJvdmlkZXJOYW1lO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRQcm92aWRlckRhdGEoZGF0YTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCB1bmRlZmluZWQpOiBJVmlkZW9Db25mZXJlbmNlQnVpbGRlciB7XG4gICAgICAgIHRoaXMuY2FsbC5wcm92aWRlckRhdGEgPSBkYXRhO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UHJvdmlkZXJEYXRhKCk6IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbC5wcm92aWRlckRhdGEhO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRUaXRsZSh1c2VySWQ6IHN0cmluZyk6IElWaWRlb0NvbmZlcmVuY2VCdWlsZGVyIHtcbiAgICAgICAgdGhpcy5jYWxsLnRpdGxlID0gdXNlcklkO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VGl0bGUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbC50aXRsZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0RGlzY3Vzc2lvblJpZChyaWQ6IEFwcFZpZGVvQ29uZmVyZW5jZVsnZGlzY3Vzc2lvblJpZCddKTogSVZpZGVvQ29uZmVyZW5jZUJ1aWxkZXIge1xuICAgICAgICB0aGlzLmNhbGwuZGlzY3Vzc2lvblJpZCA9IHJpZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldERpc2N1c3Npb25SaWQoKTogQXBwVmlkZW9Db25mZXJlbmNlWydkaXNjdXNzaW9uUmlkJ10ge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxsLmRpc2N1c3Npb25SaWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFZpZGVvQ29uZmVyZW5jZSgpOiBBcHBWaWRlb0NvbmZlcmVuY2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxsO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxTQUFTLE9BQU8sUUFBUSwwQkFBMEI7QUFFbEQsTUFBTSxFQUFFLDBCQUEwQixFQUFFLEdBQUcsUUFBUTtBQVEvQyxPQUFPLE1BQU07RUFDRixPQUFxRCwyQkFBMkIsZ0JBQWdCLENBQUM7RUFFOUYsS0FBeUI7RUFFbkMsWUFBWSxJQUFrQyxDQUFFO0lBQzVDLElBQUksQ0FBQyxJQUFJLEdBQUksUUFBUSxDQUFDO0VBQzFCO0VBRU8sUUFBUSxJQUFpQyxFQUEyQjtJQUN2RSxJQUFJLENBQUMsSUFBSSxHQUFHO01BQ1IsS0FBSyxLQUFLLEdBQUc7TUFDYixXQUFXLEtBQUssU0FBUztNQUN6QixjQUFjLEtBQUssWUFBWTtNQUMvQixPQUFPLEtBQUssS0FBSztNQUNqQixlQUFlLEtBQUssYUFBYTtJQUNyQztJQUVBLE9BQU8sSUFBSTtFQUNmO0VBRU8sVUFBVSxHQUFXLEVBQTJCO0lBQ25ELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHO0lBQ2hCLE9BQU8sSUFBSTtFQUNmO0VBRU8sWUFBb0I7SUFDdkIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUc7RUFDeEI7RUFFTyxhQUFhLE1BQWMsRUFBMkI7SUFDekQsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUc7SUFDdEIsT0FBTyxJQUFJO0VBQ2Y7RUFFTyxlQUF1QjtJQUMxQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUztFQUM5QjtFQUVPLGdCQUFnQixNQUFjLEVBQTJCO0lBQzVELElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxHQUFHO0lBQ3pCLE9BQU8sSUFBSTtFQUNmO0VBRU8sa0JBQTBCO0lBQzdCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZO0VBQ2pDO0VBRU8sZ0JBQWdCLElBQXlDLEVBQTJCO0lBQ3ZGLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxHQUFHO0lBQ3pCLE9BQU8sSUFBSTtFQUNmO0VBRU8sa0JBQTJDO0lBQzlDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZO0VBQ2pDO0VBRU8sU0FBUyxNQUFjLEVBQTJCO0lBQ3JELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHO0lBQ2xCLE9BQU8sSUFBSTtFQUNmO0VBRU8sV0FBbUI7SUFDdEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUs7RUFDMUI7RUFFTyxpQkFBaUIsR0FBd0MsRUFBMkI7SUFDdkYsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUc7SUFDMUIsT0FBTyxJQUFJO0VBQ2Y7RUFFTyxtQkFBd0Q7SUFDM0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWE7RUFDbEM7RUFFTyxxQkFBeUM7SUFDNUMsT0FBTyxJQUFJLENBQUMsSUFBSTtFQUNwQjtBQUNKIn0=