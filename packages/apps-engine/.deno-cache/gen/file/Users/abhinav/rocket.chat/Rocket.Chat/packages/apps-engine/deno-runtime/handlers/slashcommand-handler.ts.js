import { JsonRpcError } from 'jsonrpc-lite';
import { AppObjectRegistry } from '../AppObjectRegistry.ts';
import { AppAccessorsInstance } from '../lib/accessors/mod.ts';
import { require } from '../lib/require.ts';
import createRoom from '../lib/roomFactory.ts';
// For some reason Deno couldn't understand the typecast to the original interfaces and said it wasn't a constructor type
const { SlashCommandContext } = require('@rocket.chat/apps-engine/definition/slashcommands/SlashCommandContext.js');
export default async function slashCommandHandler(call, params) {
  const [, commandName, method] = call.split(':');
  const command = AppObjectRegistry.get(`slashcommand:${commandName}`);
  if (!command) {
    return new JsonRpcError(`Slashcommand ${commandName} not found`, -32000);
  }
  let result;
  // If the command is registered, we're pretty safe to assume the app is not undefined
  const app = AppObjectRegistry.get('app');
  app.getLogger().debug(`${commandName}'s ${method} is being executed...`, params);
  try {
    if (method === 'executor' || method === 'previewer') {
      result = await handleExecutor({
        AppAccessorsInstance
      }, command, method, params);
    } else if (method === 'executePreviewItem') {
      result = await handlePreviewItem({
        AppAccessorsInstance
      }, command, params);
    } else {
      return new JsonRpcError(`Method ${method} not found on slashcommand ${commandName}`, -32000);
    }
    app.getLogger().debug(`${commandName}'s ${method} was successfully executed.`);
  } catch (error) {
    app.getLogger().debug(`${commandName}'s ${method} was unsuccessful.`);
    return new JsonRpcError(error.message, -32000);
  }
  return result;
}
/**
 * @param deps Dependencies that need to be injected into the slashcommand
 * @param command The slashcommand that is being executed
 * @param method The method that is being executed
 * @param params The parameters that are being passed to the method
 */ export function handleExecutor(deps, command, method, params) {
  const executor = command[method];
  if (typeof executor !== 'function') {
    throw new Error(`Method ${method} not found on slashcommand ${command.command}`);
  }
  if (!Array.isArray(params) || typeof params[0] !== 'object' || !params[0]) {
    throw new Error(`First parameter must be an object`);
  }
  const { sender, room, params: args, threadId, triggerId } = params[0];
  const context = new SlashCommandContext(sender, createRoom(room, deps.AppAccessorsInstance.getSenderFn()), args, threadId, triggerId);
  return executor.apply(command, [
    context,
    deps.AppAccessorsInstance.getReader(),
    deps.AppAccessorsInstance.getModifier(),
    deps.AppAccessorsInstance.getHttp(),
    deps.AppAccessorsInstance.getPersistence()
  ]);
}
/**
 * @param deps Dependencies that need to be injected into the slashcommand
 * @param command The slashcommand that is being executed
 * @param params The parameters that are being passed to the method
 */ export function handlePreviewItem(deps, command, params) {
  if (typeof command.executePreviewItem !== 'function') {
    throw new Error(`Method  not found on slashcommand ${command.command}`);
  }
  if (!Array.isArray(params) || typeof params[0] !== 'object' || !params[0]) {
    throw new Error(`First parameter must be an object`);
  }
  const [previewItem, { sender, room, params: args, threadId, triggerId }] = params;
  const context = new SlashCommandContext(sender, createRoom(room, deps.AppAccessorsInstance.getSenderFn()), args, threadId, triggerId);
  return command.executePreviewItem(previewItem, context, deps.AppAccessorsInstance.getReader(), deps.AppAccessorsInstance.getModifier(), deps.AppAccessorsInstance.getHttp(), deps.AppAccessorsInstance.getPersistence());
}
//# sourceMappingURL=data:application/json;base64,