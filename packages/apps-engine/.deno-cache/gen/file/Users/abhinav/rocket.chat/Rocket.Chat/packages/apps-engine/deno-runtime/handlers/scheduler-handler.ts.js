import { JsonRpcError } from 'jsonrpc-lite';
import { AppObjectRegistry } from '../AppObjectRegistry.ts';
import { AppAccessorsInstance } from '../lib/accessors/mod.ts';
export default async function handleScheduler(method, params) {
  const [, processorId] = method.split(':');
  if (!Array.isArray(params)) {
    return JsonRpcError.invalidParams({
      message: 'Invalid params'
    });
  }
  const [context] = params;
  const app = AppObjectRegistry.get('app');
  if (!app) {
    return JsonRpcError.internalError({
      message: 'App not found'
    });
  }
  // AppSchedulerManager will append the appId to the processor name to avoid conflicts
  const processor = AppObjectRegistry.get(`scheduler:${processorId}`);
  if (!processor) {
    return JsonRpcError.methodNotFound({
      message: `Could not find processor for method ${method}`
    });
  }
  app.getLogger().debug(`Job processor ${processor.id} is being executed...`);
  try {
    await processor.processor(context, AppAccessorsInstance.getReader(), AppAccessorsInstance.getModifier(), AppAccessorsInstance.getHttp(), AppAccessorsInstance.getPersistence());
    app.getLogger().debug(`Job processor ${processor.id} was successfully executed`);
    return null;
  } catch (e) {
    app.getLogger().error(e);
    app.getLogger().error(`Job processor ${processor.id} was unsuccessful`);
    return JsonRpcError.internalError({
      message: e.message
    });
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvYWJoaW5hdi9yb2NrZXQuY2hhdC9Sb2NrZXQuQ2hhdC9wYWNrYWdlcy9hcHBzLWVuZ2luZS9kZW5vLXJ1bnRpbWUvaGFuZGxlcnMvc2NoZWR1bGVyLWhhbmRsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVmaW5lZCwgSnNvblJwY0Vycm9yIH0gZnJvbSAnanNvbnJwYy1saXRlJztcbmltcG9ydCB0eXBlIHsgQXBwIH0gZnJvbSAnQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL2RlZmluaXRpb24vQXBwLnRzJztcbmltcG9ydCB0eXBlIHsgSVByb2Nlc3NvciB9IGZyb20gJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL3NjaGVkdWxlci9JUHJvY2Vzc29yLnRzJztcblxuaW1wb3J0IHsgQXBwT2JqZWN0UmVnaXN0cnkgfSBmcm9tICcuLi9BcHBPYmplY3RSZWdpc3RyeS50cyc7XG5pbXBvcnQgeyBBcHBBY2Nlc3NvcnNJbnN0YW5jZSB9IGZyb20gJy4uL2xpYi9hY2Nlc3NvcnMvbW9kLnRzJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlU2NoZWR1bGVyKG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IHVua25vd24pOiBQcm9taXNlPERlZmluZWQgfCBKc29uUnBjRXJyb3I+IHtcbiAgICBjb25zdCBbLCBwcm9jZXNzb3JJZF0gPSBtZXRob2Quc3BsaXQoJzonKTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocGFyYW1zKSkge1xuICAgICAgICByZXR1cm4gSnNvblJwY0Vycm9yLmludmFsaWRQYXJhbXMoeyBtZXNzYWdlOiAnSW52YWxpZCBwYXJhbXMnIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IFtjb250ZXh0XSA9IHBhcmFtcyBhcyBbUmVjb3JkPHN0cmluZywgdW5rbm93bj5dO1xuXG4gICAgY29uc3QgYXBwID0gQXBwT2JqZWN0UmVnaXN0cnkuZ2V0PEFwcD4oJ2FwcCcpO1xuXG4gICAgaWYgKCFhcHApIHtcbiAgICAgICAgcmV0dXJuIEpzb25ScGNFcnJvci5pbnRlcm5hbEVycm9yKHsgbWVzc2FnZTogJ0FwcCBub3QgZm91bmQnIH0pO1xuICAgIH1cblxuICAgIC8vIEFwcFNjaGVkdWxlck1hbmFnZXIgd2lsbCBhcHBlbmQgdGhlIGFwcElkIHRvIHRoZSBwcm9jZXNzb3IgbmFtZSB0byBhdm9pZCBjb25mbGljdHNcbiAgICBjb25zdCBwcm9jZXNzb3IgPSBBcHBPYmplY3RSZWdpc3RyeS5nZXQ8SVByb2Nlc3Nvcj4oYHNjaGVkdWxlcjoke3Byb2Nlc3NvcklkfWApO1xuXG4gICAgaWYgKCFwcm9jZXNzb3IpIHtcbiAgICAgICAgcmV0dXJuIEpzb25ScGNFcnJvci5tZXRob2ROb3RGb3VuZCh7XG4gICAgICAgICAgICBtZXNzYWdlOiBgQ291bGQgbm90IGZpbmQgcHJvY2Vzc29yIGZvciBtZXRob2QgJHttZXRob2R9YCxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXBwLmdldExvZ2dlcigpLmRlYnVnKGBKb2IgcHJvY2Vzc29yICR7cHJvY2Vzc29yLmlkfSBpcyBiZWluZyBleGVjdXRlZC4uLmApO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgcHJvY2Vzc29yLnByb2Nlc3NvcihcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICBBcHBBY2Nlc3NvcnNJbnN0YW5jZS5nZXRSZWFkZXIoKSxcbiAgICAgICAgICAgIEFwcEFjY2Vzc29yc0luc3RhbmNlLmdldE1vZGlmaWVyKCksXG4gICAgICAgICAgICBBcHBBY2Nlc3NvcnNJbnN0YW5jZS5nZXRIdHRwKCksXG4gICAgICAgICAgICBBcHBBY2Nlc3NvcnNJbnN0YW5jZS5nZXRQZXJzaXN0ZW5jZSgpLFxuICAgICAgICApO1xuXG4gICAgICAgIGFwcC5nZXRMb2dnZXIoKS5kZWJ1ZyhgSm9iIHByb2Nlc3NvciAke3Byb2Nlc3Nvci5pZH0gd2FzIHN1Y2Nlc3NmdWxseSBleGVjdXRlZGApO1xuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgYXBwLmdldExvZ2dlcigpLmVycm9yKGUpO1xuICAgICAgICBhcHAuZ2V0TG9nZ2VyKCkuZXJyb3IoYEpvYiBwcm9jZXNzb3IgJHtwcm9jZXNzb3IuaWR9IHdhcyB1bnN1Y2Nlc3NmdWxgKTtcblxuICAgICAgICByZXR1cm4gSnNvblJwY0Vycm9yLmludGVybmFsRXJyb3IoeyBtZXNzYWdlOiBlLm1lc3NhZ2UgfSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQWtCLFlBQVksUUFBUSxlQUFlO0FBSXJELFNBQVMsaUJBQWlCLFFBQVEsMEJBQTBCO0FBQzVELFNBQVMsb0JBQW9CLFFBQVEsMEJBQTBCO0FBRS9ELGVBQWUsZUFBZSxnQkFBZ0IsTUFBYyxFQUFFLE1BQWU7RUFDekUsTUFBTSxHQUFHLFlBQVksR0FBRyxPQUFPLEtBQUssQ0FBQztFQUNyQyxJQUFJLENBQUMsTUFBTSxPQUFPLENBQUMsU0FBUztJQUN4QixPQUFPLGFBQWEsYUFBYSxDQUFDO01BQUUsU0FBUztJQUFpQjtFQUNsRTtFQUVBLE1BQU0sQ0FBQyxRQUFRLEdBQUc7RUFFbEIsTUFBTSxNQUFNLGtCQUFrQixHQUFHLENBQU07RUFFdkMsSUFBSSxDQUFDLEtBQUs7SUFDTixPQUFPLGFBQWEsYUFBYSxDQUFDO01BQUUsU0FBUztJQUFnQjtFQUNqRTtFQUVBLHFGQUFxRjtFQUNyRixNQUFNLFlBQVksa0JBQWtCLEdBQUcsQ0FBYSxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUM7RUFFOUUsSUFBSSxDQUFDLFdBQVc7SUFDWixPQUFPLGFBQWEsY0FBYyxDQUFDO01BQy9CLFNBQVMsQ0FBQyxvQ0FBb0MsRUFBRSxPQUFPLENBQUM7SUFDNUQ7RUFDSjtFQUVBLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDLGNBQWMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztFQUUxRSxJQUFJO0lBQ0EsTUFBTSxVQUFVLFNBQVMsQ0FDckIsU0FDQSxxQkFBcUIsU0FBUyxJQUM5QixxQkFBcUIsV0FBVyxJQUNoQyxxQkFBcUIsT0FBTyxJQUM1QixxQkFBcUIsY0FBYztJQUd2QyxJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUMsQ0FBQyxjQUFjLEVBQUUsVUFBVSxFQUFFLENBQUMsMEJBQTBCLENBQUM7SUFFL0UsT0FBTztFQUNYLEVBQUUsT0FBTyxHQUFHO0lBQ1IsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDLGNBQWMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztJQUV0RSxPQUFPLGFBQWEsYUFBYSxDQUFDO01BQUUsU0FBUyxFQUFFLE9BQU87SUFBQztFQUMzRDtBQUNKIn0=