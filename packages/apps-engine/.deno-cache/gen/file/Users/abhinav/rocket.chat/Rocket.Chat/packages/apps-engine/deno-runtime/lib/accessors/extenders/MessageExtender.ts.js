import { require } from '../../../lib/require.ts';
const { RocketChatAssociationModel } = require('@rocket.chat/apps-engine/definition/metadata/RocketChatAssociations.js');
export class MessageExtender {
  msg;
  kind;
  constructor(msg){
    this.msg = msg;
    this.kind = RocketChatAssociationModel.MESSAGE;
    if (!Array.isArray(msg.attachments)) {
      this.msg.attachments = [];
    }
  }
  addCustomField(key, value) {
    if (!this.msg.customFields) {
      this.msg.customFields = {};
    }
    if (this.msg.customFields[key]) {
      throw new Error(`The message already contains a custom field by the key: ${key}`);
    }
    if (key.includes('.')) {
      throw new Error(`The given key contains a period, which is not allowed. Key: ${key}`);
    }
    this.msg.customFields[key] = value;
    return this;
  }
  addAttachment(attachment) {
    this.ensureAttachment();
    this.msg.attachments.push(attachment);
    return this;
  }
  addAttachments(attachments) {
    this.ensureAttachment();
    this.msg.attachments = this.msg.attachments.concat(attachments);
    return this;
  }
  getMessage() {
    return structuredClone(this.msg);
  }
  ensureAttachment() {
    if (!Array.isArray(this.msg.attachments)) {
      this.msg.attachments = [];
    }
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvYWJoaW5hdi9yb2NrZXQuY2hhdC9Sb2NrZXQuQ2hhdC9wYWNrYWdlcy9hcHBzLWVuZ2luZS9kZW5vLXJ1bnRpbWUvbGliL2FjY2Vzc29ycy9leHRlbmRlcnMvTWVzc2FnZUV4dGVuZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSU1lc3NhZ2VFeHRlbmRlciB9IGZyb20gJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL2FjY2Vzc29ycy9JTWVzc2FnZUV4dGVuZGVyLnRzJztcbmltcG9ydCB0eXBlIHsgUm9ja2V0Q2hhdEFzc29jaWF0aW9uTW9kZWwgYXMgX1JvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsIH0gZnJvbSAnQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL2RlZmluaXRpb24vbWV0YWRhdGEvUm9ja2V0Q2hhdEFzc29jaWF0aW9ucy50cyc7XG5pbXBvcnQgdHlwZSB7IElNZXNzYWdlIH0gZnJvbSAnQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL2RlZmluaXRpb24vbWVzc2FnZXMvSU1lc3NhZ2UudHMnO1xuaW1wb3J0IHR5cGUgeyBJTWVzc2FnZUF0dGFjaG1lbnQgfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9tZXNzYWdlcy9JTWVzc2FnZUF0dGFjaG1lbnQudHMnO1xuXG5pbXBvcnQgeyByZXF1aXJlIH0gZnJvbSAnLi4vLi4vLi4vbGliL3JlcXVpcmUudHMnO1xuXG5jb25zdCB7IFJvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsIH0gPSByZXF1aXJlKCdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9tZXRhZGF0YS9Sb2NrZXRDaGF0QXNzb2NpYXRpb25zLmpzJykgYXMge1xuICAgIFJvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsOiB0eXBlb2YgX1JvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsO1xufTtcblxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VFeHRlbmRlciBpbXBsZW1lbnRzIElNZXNzYWdlRXh0ZW5kZXIge1xuICAgIHB1YmxpYyByZWFkb25seSBraW5kOiBfUm9ja2V0Q2hhdEFzc29jaWF0aW9uTW9kZWwuTUVTU0FHRTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbXNnOiBJTWVzc2FnZSkge1xuICAgICAgICB0aGlzLmtpbmQgPSBSb2NrZXRDaGF0QXNzb2NpYXRpb25Nb2RlbC5NRVNTQUdFO1xuXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShtc2cuYXR0YWNobWVudHMpKSB7XG4gICAgICAgICAgICB0aGlzLm1zZy5hdHRhY2htZW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEN1c3RvbUZpZWxkKGtleTogc3RyaW5nLCB2YWx1ZTogdW5rbm93bik6IElNZXNzYWdlRXh0ZW5kZXIge1xuICAgICAgICBpZiAoIXRoaXMubXNnLmN1c3RvbUZpZWxkcykge1xuICAgICAgICAgICAgdGhpcy5tc2cuY3VzdG9tRmllbGRzID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5tc2cuY3VzdG9tRmllbGRzW2tleV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIG1lc3NhZ2UgYWxyZWFkeSBjb250YWlucyBhIGN1c3RvbSBmaWVsZCBieSB0aGUga2V5OiAke2tleX1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXkuaW5jbHVkZXMoJy4nKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgZ2l2ZW4ga2V5IGNvbnRhaW5zIGEgcGVyaW9kLCB3aGljaCBpcyBub3QgYWxsb3dlZC4gS2V5OiAke2tleX1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubXNnLmN1c3RvbUZpZWxkc1trZXldID0gdmFsdWU7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEF0dGFjaG1lbnQoYXR0YWNobWVudDogSU1lc3NhZ2VBdHRhY2htZW50KTogSU1lc3NhZ2VFeHRlbmRlciB7XG4gICAgICAgIHRoaXMuZW5zdXJlQXR0YWNobWVudCgpO1xuXG4gICAgICAgIHRoaXMubXNnLmF0dGFjaG1lbnRzIS5wdXNoKGF0dGFjaG1lbnQpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBhZGRBdHRhY2htZW50cyhhdHRhY2htZW50czogQXJyYXk8SU1lc3NhZ2VBdHRhY2htZW50Pik6IElNZXNzYWdlRXh0ZW5kZXIge1xuICAgICAgICB0aGlzLmVuc3VyZUF0dGFjaG1lbnQoKTtcblxuICAgICAgICB0aGlzLm1zZy5hdHRhY2htZW50cyA9IHRoaXMubXNnLmF0dGFjaG1lbnRzIS5jb25jYXQoYXR0YWNobWVudHMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRNZXNzYWdlKCk6IElNZXNzYWdlIHtcbiAgICAgICAgcmV0dXJuIHN0cnVjdHVyZWRDbG9uZSh0aGlzLm1zZyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBlbnN1cmVBdHRhY2htZW50KCk6IHZvaWQge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy5tc2cuYXR0YWNobWVudHMpKSB7XG4gICAgICAgICAgICB0aGlzLm1zZy5hdHRhY2htZW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLFNBQVMsT0FBTyxRQUFRLDBCQUEwQjtBQUVsRCxNQUFNLEVBQUUsMEJBQTBCLEVBQUUsR0FBRyxRQUFRO0FBSS9DLE9BQU8sTUFBTTs7RUFDTyxLQUEwQztFQUUxRCxZQUFZLEFBQVEsR0FBYSxDQUFFO1NBQWYsTUFBQTtJQUNoQixJQUFJLENBQUMsSUFBSSxHQUFHLDJCQUEyQixPQUFPO0lBRTlDLElBQUksQ0FBQyxNQUFNLE9BQU8sQ0FBQyxJQUFJLFdBQVcsR0FBRztNQUNqQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxFQUFFO0lBQzdCO0VBQ0o7RUFFTyxlQUFlLEdBQVcsRUFBRSxLQUFjLEVBQW9CO0lBQ2pFLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRTtNQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxDQUFDO0lBQzdCO0lBRUEsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUU7TUFDNUIsTUFBTSxJQUFJLE1BQU0sQ0FBQyx3REFBd0QsRUFBRSxJQUFJLENBQUM7SUFDcEY7SUFFQSxJQUFJLElBQUksUUFBUSxDQUFDLE1BQU07TUFDbkIsTUFBTSxJQUFJLE1BQU0sQ0FBQyw0REFBNEQsRUFBRSxJQUFJLENBQUM7SUFDeEY7SUFFQSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUc7SUFFN0IsT0FBTyxJQUFJO0VBQ2Y7RUFFTyxjQUFjLFVBQThCLEVBQW9CO0lBQ25FLElBQUksQ0FBQyxnQkFBZ0I7SUFFckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUUsSUFBSSxDQUFDO0lBRTNCLE9BQU8sSUFBSTtFQUNmO0VBRU8sZUFBZSxXQUFzQyxFQUFvQjtJQUM1RSxJQUFJLENBQUMsZ0JBQWdCO0lBRXJCLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFFLE1BQU0sQ0FBQztJQUVwRCxPQUFPLElBQUk7RUFDZjtFQUVPLGFBQXVCO0lBQzFCLE9BQU8sZ0JBQWdCLElBQUksQ0FBQyxHQUFHO0VBQ25DO0VBRVEsbUJBQXlCO0lBQzdCLElBQUksQ0FBQyxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRztNQUN0QyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxFQUFFO0lBQzdCO0VBQ0o7QUFDSiJ9