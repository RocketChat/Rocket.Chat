import { JsonRpcError } from 'jsonrpc-lite';
import { require } from '../../lib/require.ts';
import { AppObjectRegistry } from '../../AppObjectRegistry.ts';
import { AppAccessorsInstance } from '../../lib/accessors/mod.ts';
export const uikitInteractions = [
  'executeBlockActionHandler',
  'executeViewSubmitHandler',
  'executeViewClosedHandler',
  'executeActionButtonHandler',
  'executeLivechatBlockActionHandler'
];
export const { UIKitBlockInteractionContext, UIKitViewSubmitInteractionContext, UIKitViewCloseInteractionContext, UIKitActionButtonInteractionContext } = require('@rocket.chat/apps-engine/definition/uikit/UIKitInteractionContext.js');
export const { UIKitLivechatBlockInteractionContext } = require('@rocket.chat/apps-engine/definition/uikit/livechat/UIKitLivechatInteractionContext.js');
export default async function handleUIKitInteraction(method, params) {
  if (!uikitInteractions.includes(method)) {
    return JsonRpcError.methodNotFound(null);
  }
  if (!Array.isArray(params)) {
    return JsonRpcError.invalidParams(null);
  }
  const app = AppObjectRegistry.get('app');
  const interactionHandler = app?.[method];
  if (!app || typeof interactionHandler !== 'function') {
    return JsonRpcError.methodNotFound({
      message: `App does not implement method "${method}"`
    });
  }
  const [payload] = params;
  if (!payload) {
    return JsonRpcError.invalidParams(null);
  }
  let context;
  switch(method){
    case 'executeBlockActionHandler':
      context = new UIKitBlockInteractionContext(payload);
      break;
    case 'executeViewSubmitHandler':
      context = new UIKitViewSubmitInteractionContext(payload);
      break;
    case 'executeViewClosedHandler':
      context = new UIKitViewCloseInteractionContext(payload);
      break;
    case 'executeActionButtonHandler':
      context = new UIKitActionButtonInteractionContext(payload);
      break;
    case 'executeLivechatBlockActionHandler':
      context = new UIKitLivechatBlockInteractionContext(payload);
      break;
  }
  try {
    return await interactionHandler.call(app, context, AppAccessorsInstance.getReader(), AppAccessorsInstance.getHttp(), AppAccessorsInstance.getPersistence(), AppAccessorsInstance.getModifier());
  } catch (e) {
    return JsonRpcError.internalError({
      message: e.message
    });
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvYWJoaW5hdi9yb2NrZXQuY2hhdC9Sb2NrZXQuQ2hhdC9wYWNrYWdlcy9hcHBzLWVuZ2luZS9kZW5vLXJ1bnRpbWUvaGFuZGxlcnMvdWlraXQvaGFuZGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWZpbmVkLCBKc29uUnBjRXJyb3IgfSBmcm9tICdqc29ucnBjLWxpdGUnO1xuaW1wb3J0IHR5cGUgeyBBcHAgfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9BcHAudHMnO1xuXG5pbXBvcnQgeyByZXF1aXJlIH0gZnJvbSAnLi4vLi4vbGliL3JlcXVpcmUudHMnO1xuaW1wb3J0IHsgQXBwT2JqZWN0UmVnaXN0cnkgfSBmcm9tICcuLi8uLi9BcHBPYmplY3RSZWdpc3RyeS50cyc7XG5pbXBvcnQgeyBBcHBBY2Nlc3NvcnNJbnN0YW5jZSB9IGZyb20gJy4uLy4uL2xpYi9hY2Nlc3NvcnMvbW9kLnRzJztcblxuZXhwb3J0IGNvbnN0IHVpa2l0SW50ZXJhY3Rpb25zID0gW1xuICAgICdleGVjdXRlQmxvY2tBY3Rpb25IYW5kbGVyJyxcbiAgICAnZXhlY3V0ZVZpZXdTdWJtaXRIYW5kbGVyJyxcbiAgICAnZXhlY3V0ZVZpZXdDbG9zZWRIYW5kbGVyJyxcbiAgICAnZXhlY3V0ZUFjdGlvbkJ1dHRvbkhhbmRsZXInLFxuICAgICdleGVjdXRlTGl2ZWNoYXRCbG9ja0FjdGlvbkhhbmRsZXInLFxuXTtcblxuZXhwb3J0IGNvbnN0IHtcbiAgICBVSUtpdEJsb2NrSW50ZXJhY3Rpb25Db250ZXh0LFxuICAgIFVJS2l0Vmlld1N1Ym1pdEludGVyYWN0aW9uQ29udGV4dCxcbiAgICBVSUtpdFZpZXdDbG9zZUludGVyYWN0aW9uQ29udGV4dCxcbiAgICBVSUtpdEFjdGlvbkJ1dHRvbkludGVyYWN0aW9uQ29udGV4dCxcbn0gPSByZXF1aXJlKCdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi91aWtpdC9VSUtpdEludGVyYWN0aW9uQ29udGV4dC5qcycpO1xuXG5leHBvcnQgY29uc3QgeyBVSUtpdExpdmVjaGF0QmxvY2tJbnRlcmFjdGlvbkNvbnRleHQgfSA9IHJlcXVpcmUoJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL3Vpa2l0L2xpdmVjaGF0L1VJS2l0TGl2ZWNoYXRJbnRlcmFjdGlvbkNvbnRleHQuanMnKTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlVUlLaXRJbnRlcmFjdGlvbihtZXRob2Q6IHN0cmluZywgcGFyYW1zOiB1bmtub3duKTogUHJvbWlzZTxEZWZpbmVkIHwgSnNvblJwY0Vycm9yPiB7XG4gICAgaWYgKCF1aWtpdEludGVyYWN0aW9ucy5pbmNsdWRlcyhtZXRob2QpKSB7XG4gICAgICAgIHJldHVybiBKc29uUnBjRXJyb3IubWV0aG9kTm90Rm91bmQobnVsbCk7XG4gICAgfVxuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHBhcmFtcykpIHtcbiAgICAgICAgcmV0dXJuIEpzb25ScGNFcnJvci5pbnZhbGlkUGFyYW1zKG51bGwpO1xuICAgIH1cblxuICAgIGNvbnN0IGFwcCA9IEFwcE9iamVjdFJlZ2lzdHJ5LmdldDxBcHA+KCdhcHAnKTtcblxuICAgIGNvbnN0IGludGVyYWN0aW9uSGFuZGxlciA9IGFwcD8uW21ldGhvZCBhcyBrZXlvZiBBcHBdIGFzIHVua25vd247XG5cbiAgICBpZiAoIWFwcCB8fCB0eXBlb2YgaW50ZXJhY3Rpb25IYW5kbGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBKc29uUnBjRXJyb3IubWV0aG9kTm90Rm91bmQoe1xuICAgICAgICAgICAgbWVzc2FnZTogYEFwcCBkb2VzIG5vdCBpbXBsZW1lbnQgbWV0aG9kIFwiJHttZXRob2R9XCJgLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBbcGF5bG9hZF0gPSBwYXJhbXMgYXMgW1JlY29yZDxzdHJpbmcsIHVua25vd24+XTtcblxuICAgIGlmICghcGF5bG9hZCkge1xuICAgICAgICByZXR1cm4gSnNvblJwY0Vycm9yLmludmFsaWRQYXJhbXMobnVsbCk7XG4gICAgfVxuXG4gICAgbGV0IGNvbnRleHQ7XG5cbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgICBjYXNlICdleGVjdXRlQmxvY2tBY3Rpb25IYW5kbGVyJzpcbiAgICAgICAgICAgIGNvbnRleHQgPSBuZXcgVUlLaXRCbG9ja0ludGVyYWN0aW9uQ29udGV4dChwYXlsb2FkKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdleGVjdXRlVmlld1N1Ym1pdEhhbmRsZXInOlxuICAgICAgICAgICAgY29udGV4dCA9IG5ldyBVSUtpdFZpZXdTdWJtaXRJbnRlcmFjdGlvbkNvbnRleHQocGF5bG9hZCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZXhlY3V0ZVZpZXdDbG9zZWRIYW5kbGVyJzpcbiAgICAgICAgICAgIGNvbnRleHQgPSBuZXcgVUlLaXRWaWV3Q2xvc2VJbnRlcmFjdGlvbkNvbnRleHQocGF5bG9hZCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZXhlY3V0ZUFjdGlvbkJ1dHRvbkhhbmRsZXInOlxuICAgICAgICAgICAgY29udGV4dCA9IG5ldyBVSUtpdEFjdGlvbkJ1dHRvbkludGVyYWN0aW9uQ29udGV4dChwYXlsb2FkKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdleGVjdXRlTGl2ZWNoYXRCbG9ja0FjdGlvbkhhbmRsZXInOlxuICAgICAgICAgICAgY29udGV4dCA9IG5ldyBVSUtpdExpdmVjaGF0QmxvY2tJbnRlcmFjdGlvbkNvbnRleHQocGF5bG9hZCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgaW50ZXJhY3Rpb25IYW5kbGVyLmNhbGwoXG4gICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgQXBwQWNjZXNzb3JzSW5zdGFuY2UuZ2V0UmVhZGVyKCksXG4gICAgICAgICAgICBBcHBBY2Nlc3NvcnNJbnN0YW5jZS5nZXRIdHRwKCksXG4gICAgICAgICAgICBBcHBBY2Nlc3NvcnNJbnN0YW5jZS5nZXRQZXJzaXN0ZW5jZSgpLFxuICAgICAgICAgICAgQXBwQWNjZXNzb3JzSW5zdGFuY2UuZ2V0TW9kaWZpZXIoKSxcbiAgICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBKc29uUnBjRXJyb3IuaW50ZXJuYWxFcnJvcih7IG1lc3NhZ2U6IGUubWVzc2FnZSB9KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBa0IsWUFBWSxRQUFRLGVBQWU7QUFHckQsU0FBUyxPQUFPLFFBQVEsdUJBQXVCO0FBQy9DLFNBQVMsaUJBQWlCLFFBQVEsNkJBQTZCO0FBQy9ELFNBQVMsb0JBQW9CLFFBQVEsNkJBQTZCO0FBRWxFLE9BQU8sTUFBTSxvQkFBb0I7RUFDN0I7RUFDQTtFQUNBO0VBQ0E7RUFDQTtDQUNILENBQUM7QUFFRixPQUFPLE1BQU0sRUFDVCw0QkFBNEIsRUFDNUIsaUNBQWlDLEVBQ2pDLGdDQUFnQyxFQUNoQyxtQ0FBbUMsRUFDdEMsR0FBRyxRQUFRLHdFQUF3RTtBQUVwRixPQUFPLE1BQU0sRUFBRSxvQ0FBb0MsRUFBRSxHQUFHLFFBQVEseUZBQXlGO0FBRXpKLGVBQWUsZUFBZSx1QkFBdUIsTUFBYyxFQUFFLE1BQWU7RUFDaEYsSUFBSSxDQUFDLGtCQUFrQixRQUFRLENBQUMsU0FBUztJQUNyQyxPQUFPLGFBQWEsY0FBYyxDQUFDO0VBQ3ZDO0VBRUEsSUFBSSxDQUFDLE1BQU0sT0FBTyxDQUFDLFNBQVM7SUFDeEIsT0FBTyxhQUFhLGFBQWEsQ0FBQztFQUN0QztFQUVBLE1BQU0sTUFBTSxrQkFBa0IsR0FBRyxDQUFNO0VBRXZDLE1BQU0scUJBQXFCLEtBQUssQ0FBQyxPQUFvQjtFQUVyRCxJQUFJLENBQUMsT0FBTyxPQUFPLHVCQUF1QixZQUFZO0lBQ2xELE9BQU8sYUFBYSxjQUFjLENBQUM7TUFDL0IsU0FBUyxDQUFDLCtCQUErQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3hEO0VBQ0o7RUFFQSxNQUFNLENBQUMsUUFBUSxHQUFHO0VBRWxCLElBQUksQ0FBQyxTQUFTO0lBQ1YsT0FBTyxhQUFhLGFBQWEsQ0FBQztFQUN0QztFQUVBLElBQUk7RUFFSixPQUFRO0lBQ0osS0FBSztNQUNELFVBQVUsSUFBSSw2QkFBNkI7TUFDM0M7SUFDSixLQUFLO01BQ0QsVUFBVSxJQUFJLGtDQUFrQztNQUNoRDtJQUNKLEtBQUs7TUFDRCxVQUFVLElBQUksaUNBQWlDO01BQy9DO0lBQ0osS0FBSztNQUNELFVBQVUsSUFBSSxvQ0FBb0M7TUFDbEQ7SUFDSixLQUFLO01BQ0QsVUFBVSxJQUFJLHFDQUFxQztNQUNuRDtFQUNSO0VBRUEsSUFBSTtJQUNBLE9BQU8sTUFBTSxtQkFBbUIsSUFBSSxDQUNoQyxLQUNBLFNBQ0EscUJBQXFCLFNBQVMsSUFDOUIscUJBQXFCLE9BQU8sSUFDNUIscUJBQXFCLGNBQWMsSUFDbkMscUJBQXFCLFdBQVc7RUFFeEMsRUFBRSxPQUFPLEdBQUc7SUFDUixPQUFPLGFBQWEsYUFBYSxDQUFDO01BQUUsU0FBUyxFQUFFLE9BQU87SUFBQztFQUMzRDtBQUNKIn0=