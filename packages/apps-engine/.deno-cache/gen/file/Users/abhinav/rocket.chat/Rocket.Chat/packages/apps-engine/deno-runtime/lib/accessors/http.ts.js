import { AppObjectRegistry } from "../../AppObjectRegistry.ts";
export class Http {
  httpExtender;
  read;
  persistence;
  senderFn;
  constructor(read, persistence, httpExtender, senderFn){
    this.read = read;
    this.persistence = persistence;
    this.httpExtender = httpExtender;
    this.senderFn = senderFn;
  // this.httpExtender = new HttpExtend();
  }
  get(url, options) {
    return this._processHandler(url, 'get', options);
  }
  put(url, options) {
    return this._processHandler(url, 'put', options);
  }
  post(url, options) {
    return this._processHandler(url, 'post', options);
  }
  del(url, options) {
    return this._processHandler(url, 'delete', options);
  }
  patch(url, options) {
    return this._processHandler(url, 'patch', options);
  }
  async _processHandler(url, method, options) {
    let request = options || {};
    if (typeof request.headers === 'undefined') {
      request.headers = {};
    }
    this.httpExtender.getDefaultHeaders().forEach((value, key)=>{
      if (typeof request.headers?.[key] !== 'string') {
        request.headers[key] = value;
      }
    });
    if (typeof request.params === 'undefined') {
      request.params = {};
    }
    this.httpExtender.getDefaultParams().forEach((value, key)=>{
      if (typeof request.params?.[key] !== 'string') {
        request.params[key] = value;
      }
    });
    for (const handler of this.httpExtender.getPreRequestHandlers()){
      request = await handler.executePreHttpRequest(url, request, this.read, this.persistence);
    }
    let { result: response } = await this.senderFn({
      method: `bridges:getHttpBridge:doCall`,
      params: [
        {
          appId: AppObjectRegistry.get('id'),
          method,
          url,
          request
        }
      ]
    });
    for (const handler of this.httpExtender.getPreResponseHandlers()){
      response = await handler.executePreHttpResponse(response, this.read, this.persistence);
    }
    return response;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvYWJoaW5hdi9yb2NrZXQuY2hhdC9Sb2NrZXQuQ2hhdC9wYWNrYWdlcy9hcHBzLWVuZ2luZS9kZW5vLXJ1bnRpbWUvbGliL2FjY2Vzc29ycy9odHRwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtcbiAgICBJSHR0cCxcbiAgICBJSHR0cEV4dGVuZCxcbiAgICBJSHR0cFJlcXVlc3QsXG4gICAgSUh0dHBSZXNwb25zZSxcbn0gZnJvbSBcIkByb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL2FjY2Vzc29ycy9JSHR0cC50c1wiO1xuaW1wb3J0IHR5cGUgeyBJUGVyc2lzdGVuY2UgfSBmcm9tIFwiQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL2RlZmluaXRpb24vYWNjZXNzb3JzL0lQZXJzaXN0ZW5jZS50c1wiO1xuaW1wb3J0IHR5cGUgeyBJUmVhZCB9IGZyb20gXCJAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9hY2Nlc3NvcnMvSVJlYWQudHNcIjtcblxuaW1wb3J0ICogYXMgTWVzc2VuZ2VyIGZyb20gJy4uL21lc3Nlbmdlci50cyc7XG5pbXBvcnQgeyBBcHBPYmplY3RSZWdpc3RyeSB9IGZyb20gXCIuLi8uLi9BcHBPYmplY3RSZWdpc3RyeS50c1wiO1xuXG50eXBlIFJlcXVlc3RNZXRob2QgPSAnZ2V0JyB8ICdwb3N0JyB8ICdwdXQnIHwgJ2hlYWQnIHwgJ2RlbGV0ZScgfCAncGF0Y2gnO1xuXG5leHBvcnQgY2xhc3MgSHR0cCBpbXBsZW1lbnRzIElIdHRwIHtcbiAgICBwcml2YXRlIGh0dHBFeHRlbmRlcjogSUh0dHBFeHRlbmQ7XG4gICAgcHJpdmF0ZSByZWFkOiBJUmVhZDtcbiAgICBwcml2YXRlIHBlcnNpc3RlbmNlOiBJUGVyc2lzdGVuY2U7XG4gICAgcHJpdmF0ZSBzZW5kZXJGbjogdHlwZW9mIE1lc3Nlbmdlci5zZW5kUmVxdWVzdDtcblxuICAgIGNvbnN0cnVjdG9yKHJlYWQ6IElSZWFkLCBwZXJzaXN0ZW5jZTogSVBlcnNpc3RlbmNlLCBodHRwRXh0ZW5kZXI6IElIdHRwRXh0ZW5kLCBzZW5kZXJGbjogdHlwZW9mIE1lc3Nlbmdlci5zZW5kUmVxdWVzdCkge1xuICAgICAgICB0aGlzLnJlYWQgPSByZWFkO1xuICAgICAgICB0aGlzLnBlcnNpc3RlbmNlID0gcGVyc2lzdGVuY2U7XG4gICAgICAgIHRoaXMuaHR0cEV4dGVuZGVyID0gaHR0cEV4dGVuZGVyO1xuICAgICAgICB0aGlzLnNlbmRlckZuID0gc2VuZGVyRm47XG4gICAgICAgIC8vIHRoaXMuaHR0cEV4dGVuZGVyID0gbmV3IEh0dHBFeHRlbmQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0KHVybDogc3RyaW5nLCBvcHRpb25zPzogSUh0dHBSZXF1ZXN0KTogUHJvbWlzZTxJSHR0cFJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9jZXNzSGFuZGxlcih1cmwsICdnZXQnLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcHV0KHVybDogc3RyaW5nLCBvcHRpb25zPzogSUh0dHBSZXF1ZXN0KTogUHJvbWlzZTxJSHR0cFJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9jZXNzSGFuZGxlcih1cmwsICdwdXQnLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcG9zdCh1cmw6IHN0cmluZywgb3B0aW9ucz86IElIdHRwUmVxdWVzdCk6IFByb21pc2U8SUh0dHBSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc0hhbmRsZXIodXJsLCAncG9zdCcsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZWwodXJsOiBzdHJpbmcsIG9wdGlvbnM/OiBJSHR0cFJlcXVlc3QpOiBQcm9taXNlPElIdHRwUmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3NIYW5kbGVyKHVybCwgJ2RlbGV0ZScsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBwYXRjaCh1cmw6IHN0cmluZywgb3B0aW9ucz86IElIdHRwUmVxdWVzdCk6IFByb21pc2U8SUh0dHBSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc0hhbmRsZXIodXJsLCAncGF0Y2gnLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIF9wcm9jZXNzSGFuZGxlcih1cmw6IHN0cmluZywgbWV0aG9kOiBSZXF1ZXN0TWV0aG9kLCBvcHRpb25zPzogSUh0dHBSZXF1ZXN0KTogUHJvbWlzZTxJSHR0cFJlc3BvbnNlPiB7XG4gICAgICAgIGxldCByZXF1ZXN0ID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3QuaGVhZGVycyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVycyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5odHRwRXh0ZW5kZXIuZ2V0RGVmYXVsdEhlYWRlcnMoKS5mb3JFYWNoKCh2YWx1ZTogc3RyaW5nLCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0LmhlYWRlcnM/LltrZXldICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVycyFba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3QucGFyYW1zID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmVxdWVzdC5wYXJhbXMgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaHR0cEV4dGVuZGVyLmdldERlZmF1bHRQYXJhbXMoKS5mb3JFYWNoKCh2YWx1ZTogc3RyaW5nLCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0LnBhcmFtcz8uW2tleV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5wYXJhbXMhW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIHRoaXMuaHR0cEV4dGVuZGVyLmdldFByZVJlcXVlc3RIYW5kbGVycygpKSB7XG4gICAgICAgICAgICByZXF1ZXN0ID0gYXdhaXQgaGFuZGxlci5leGVjdXRlUHJlSHR0cFJlcXVlc3QodXJsLCByZXF1ZXN0LCB0aGlzLnJlYWQsIHRoaXMucGVyc2lzdGVuY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHsgcmVzdWx0OiByZXNwb25zZSB9ID0gYXdhaXQgdGhpcy5zZW5kZXJGbih7XG4gICAgICAgICAgICBtZXRob2Q6IGBicmlkZ2VzOmdldEh0dHBCcmlkZ2U6ZG9DYWxsYCxcbiAgICAgICAgICAgIHBhcmFtczogW3tcbiAgICAgICAgICAgICAgICBhcHBJZDogQXBwT2JqZWN0UmVnaXN0cnkuZ2V0PHN0cmluZz4oJ2lkJyksXG4gICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgfV0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIHRoaXMuaHR0cEV4dGVuZGVyLmdldFByZVJlc3BvbnNlSGFuZGxlcnMoKSkge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBoYW5kbGVyLmV4ZWN1dGVQcmVIdHRwUmVzcG9uc2UocmVzcG9uc2UgYXMgSUh0dHBSZXNwb25zZSwgdGhpcy5yZWFkLCB0aGlzLnBlcnNpc3RlbmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXNwb25zZSBhcyBJSHR0cFJlc3BvbnNlO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFVQSxTQUFTLGlCQUFpQixRQUFRLDZCQUE2QjtBQUkvRCxPQUFP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