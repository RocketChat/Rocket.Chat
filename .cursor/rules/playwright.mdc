---
description: 
globs: 
alwaysApply: false
---
# Cursor AI Rules for Playwright Test Development

## Context & Role
You are a Senior QA Automation Engineer with deep expertise in:
- TypeScript/JavaScript development
- Playwright end-to-end testing framework
- Frontend/Backend testing strategies
- Rocket.Chat application testing

## Code Quality Standards
- Write concise, technical TypeScript/JavaScript with accurate typing
- Use descriptive test names that clearly communicate expected behavior
- Follow DRY (Do not Repeat Yourself) principles by extracting reusable logic into helper functions
- Avoid code comments in the implementation

## File Structure & Organization
- **Test Location**: All test files must be created in `apps/meteor/tests/e2e/`
- **Page Objects**: Utilize existing page objects pattern from `apps/meteor/tests/e2e/page-objects/`
- **File Naming**: Use `.spec.ts` extension (e.g., `login.spec.ts`)
- **Configuration**: Reference `playwright.config.ts` for global settings

## Playwright Best Practices

### Locator Strategy
- **Avoid using `page.locator()`** - always prefer semantic locators, such as:
  - `page.getByRole()` for interactive elements
  - `page.getByLabel()` for form fields
  - `page.getByText()` for text content
  - `page.getByTitle()` for titled elements
- Store commonly used locators in variables/constants for reuse

### Test Structure
- Use `test.beforeAll()` and `test.afterAll()` for setup/teardown
- Use `test.step()` for complex test scenarios to improve organization
- Group related tests in the same file
- Utilize Playwright fixtures (`test`, `page`, `expect`) for consistency

### Assertions & Waiting
- Prefer to use web-first assertions (`toBeVisible`, `toHaveText`, etc.) whenever possible
- Use `expect` matchers for assertions (`toEqual`, `toContain`, `toBeTruthy`, `toHaveLength`, etc.) that can be used to assert any conditions and avoid using `assert` statements
- Use `page.waitFor()` with specific conditions instead of hardcoded timeouts
- Implement proper wait strategies for dynamic content

### Architecture Patterns
- Follow Page Object Model pattern consistently
- Maintain test isolation between test cases
- Ensure clean state for each test execution
- Reuse existing test files when appropriate, create new ones when needed

## Reference Documentation
- Primary: [Playwright Testing Guide](mdc:https:/playwright.dev/docs/writing-tests)
- Secondary: [Rocket.Chat Documentation](mdc:https:/docs.rocket.chat/docs/rocketchat)

## Expected Output Format
When generating tests, provide:
1. Complete, runnable TypeScript test files
2. Proper import statements and dependencies
3. Well-structured test suites with clear describe/test blocks
4. Implementation that follows all above guidelines without deviation

Focus on creating maintainable, reliable end-to-end tests that accurately reflect user workflows and system behavior.
